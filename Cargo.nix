# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "bevy_prototype_frameshader/default"
    "bevy_prototype_window_random_texture_node/default"
    "bevy_prototype_transform_tracker/default"
    "client/default"
    "shared/default"
    "server/default"
    "signalling-server/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
}:
let
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
in let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    bevy_prototype_frameshader = rustPackages.unknown.bevy_prototype_frameshader."0.1.0";
    bevy_prototype_window_random_texture_node = rustPackages.unknown.bevy_prototype_window_random_texture_node."0.1.0";
    bevy_prototype_transform_tracker = rustPackages.unknown.bevy_prototype_transform_tracker."0.1.0";
    client = rustPackages.unknown.client."0.1.0";
    shared = rustPackages.unknown.shared."0.1.0";
    server = rustPackages.unknown.server."0.1.0";
    signalling-server = rustPackages.unknown.signalling-server."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" = overridableMkRustCrate (profileName: rec {
    name = "Inflector";
    version = "0.11.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a104f276ccf2299596c747b495582c8313bae3eca524bcf66db684848c50be9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ab_glyph_rasterizer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.4" { inherit profileName; };
      owned_ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph_rasterizer";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9fe5e32de01730eb1f6b7f5b51c17e03e2325bf40a74f754f04f130043affff"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "actix";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1be241f88f3b1e7e9a3fbe3b5a8a0f6915b5a1d7ee0d9a248d3376d01068cc60"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "resolver" ]
      [ "trust-dns-proto" ]
      [ "trust-dns-resolver" ]
    ];
    dependencies = {
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" { inherit profileName; };
      actix_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".actix_derive."0.5.0" { profileName = "__noProfile"; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.4.4" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.13" { profileName = "__noProfile"; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."0.4.28" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."0.2.25" { inherit profileName; };
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.3.1" { inherit profileName; };
      trust_dns_proto = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.19.7" { inherit profileName; };
      trust_dns_resolver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.19.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-codec";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78d1833b3838dbe990df0f1f87baf640cf6146e898166afe401839d1b001e570"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.8" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."0.4.28" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."0.2.25" { inherit profileName; };
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-connect."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-connect";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "177837a10863f15ba8d3ae3ec12fac1099099529ed20083a27fdfe247381d0dc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "http" ]
      [ "uri" ]
    ];
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" { inherit profileName; };
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" { inherit profileName; };
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" { inherit profileName; };
      actix_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-utils."2.0.0" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.13" { profileName = "__noProfile"; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      trust_dns_proto = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.19.7" { inherit profileName; };
      trust_dns_resolver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.19.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-cors."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "actix-cors";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "36b133d8026a9f209a9aeeeacd028e7451bcca975f592881b305d37983f303d7"; };
    dependencies = {
      actix_web = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web."3.3.2" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.13" { profileName = "__noProfile"; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
      tinyvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-http."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-http";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "452299e87817ae5673910e53c243484ca38be3828db819b6011736fc6982e874"; };
    features = builtins.concatLists [
      [ "brotli2" ]
      [ "compress" ]
      [ "default" ]
      [ "flate2" ]
    ];
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" { inherit profileName; };
      actix_connect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-connect."2.0.0" { inherit profileName; };
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" { inherit profileName; };
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" { inherit profileName; };
      actix_threadpool = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-threadpool."0.3.3" { inherit profileName; };
      actix_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-utils."2.0.0" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      brotli2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".brotli2."0.3.2" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      cookie = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cookie."0.14.3" { inherit profileName; };
      copyless = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.13" { profileName = "__noProfile"; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      encoding_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.28" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.20" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      fxhash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      h2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.2.7" { inherit profileName; };
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.2" { inherit profileName; };
      httparse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.3.5" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.6.1" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.6" { inherit profileName; };
      language_tags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".language-tags."0.2.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      mime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
      serde_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.0" { inherit profileName; };
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.4" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.2.23" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-macros."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "actix-macros";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b4ca8ce00b267af8ccebbd647de0d61e0674b6e61185cc7a592ff88772bed655"; };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-router."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "actix-router";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2ad299af73649e1fc893e333ccf86f377751eb95ff875d095131574c6f43452c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "http" ]
    ];
    dependencies = {
      bytestring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytestring."1.0.0" { inherit profileName; };
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "actix-rt";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "143fcc2912e0d1de2bcf4e2f720d2a60c28652ab4179685a1ee159e0fb3db227"; };
    dependencies = {
      actix_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-macros."0.1.3" { profileName = "__noProfile"; };
      actix_threadpool = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-threadpool."0.3.3" { inherit profileName; };
      copyless = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."0.2.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-server."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "actix-server";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "45407e6e672ca24784baa667c5d32ef109ccdd8d5e0b5ebb9ef8a67f4dfb708e"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" { inherit profileName; };
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" { inherit profileName; };
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" { inherit profileName; };
      actix_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-utils."2.0.0" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      mio_uds = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio-uds."0.6.8" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.3.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "actix-service";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0052435d581b5be835d11f4eb3bce417c8af18d87ddf8ace99f8e67e595882bb"; };
    dependencies = {
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."0.4.28" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-testing."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "actix-testing";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "47239ca38799ab74ee6a8a94d1ce857014b2ac36f242f70f3f75a66f691e791c"; };
    dependencies = {
      actix_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-macros."0.1.3" { profileName = "__noProfile"; };
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" { inherit profileName; };
      actix_server = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-server."1.0.4" { inherit profileName; };
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.3.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-threadpool."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "actix-threadpool";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d209f04d002854b9afd3743032a27b066158817965bf5d036824d19ac2cc0e30"; };
    dependencies = {
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.13" { profileName = "__noProfile"; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      threadpool = rustPackages."registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-tls."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-tls";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24789b7d7361cf5503a504ebe1c10806896f61e96eca9a7350e23001aca715fb"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" { inherit profileName; };
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" { inherit profileName; };
      actix_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-utils."2.0.0" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-utils."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-utils";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e9022dec56632d1d7979e59af14f0597a28a830a9c1c7fec8b2327eb9f16b5a"; };
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" { inherit profileName; };
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" { inherit profileName; };
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."0.4.28" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-web."3.3.2" = overridableMkRustCrate (profileName: rec {
    name = "actix-web";
    version = "3.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e641d4a172e7faa0862241a20ff4f1f5ab0ab7c279f00c2d4587b77483477b86"; };
    features = builtins.concatLists [
      [ "compress" ]
      [ "default" ]
    ];
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" { inherit profileName; };
      actix_http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-http."2.2.0" { inherit profileName; };
      actix_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-macros."0.1.3" { profileName = "__noProfile"; };
      actix_router = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-router."0.2.7" { inherit profileName; };
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" { inherit profileName; };
      actix_server = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-server."1.0.4" { inherit profileName; };
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" { inherit profileName; };
      actix_testing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-testing."1.0.1" { inherit profileName; };
      actix_threadpool = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-threadpool."0.3.3" { inherit profileName; };
      actix_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-tls."2.0.0" { inherit profileName; };
      actix_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-utils."2.0.0" { inherit profileName; };
      actix_web_codegen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web-codegen."0.4.0" { profileName = "__noProfile"; };
      awc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".awc."2.0.3" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.13" { profileName = "__noProfile"; };
      encoding_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.28" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      fxhash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      mime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
      serde_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.0" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.3.19" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.2.23" { inherit profileName; };
      tinyvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.1.0" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-web-actors."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-web-actors";
    version = "3.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f6edf3c2693e2a8c422800c87ee89a6a4eac7dd01109bc172a1093ce1f4f001"; };
    dependencies = {
      actix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix."0.10.0" { inherit profileName; };
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" { inherit profileName; };
      actix_http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-http."2.2.0" { inherit profileName; };
      actix_web = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web."3.3.2" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."0.4.28" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix-web-codegen."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-web-codegen";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad26f77093333e0e7c6ffe54ebe3582d908a104e448723eec6d43d08b07143fb"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".actix_derive."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "actix_derive";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b95aceadaf327f18f0df5962fedc1bde2f870566a0b9f65c89508a3b1f79334c"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c0929d69e78dd9bf5408269919fcbcaeb2e35e5d43e5815517cdc6a8e11a423"; };
    dependencies = {
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.23.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler32."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "adler32";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.4.7" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.4.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "739f4a8db6605981345c5654f3a85b056ce52f37a39d34da03f25bf2151ea16e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a75b7e6a93ecd6dbd2c225154d0fa7f86205574ecaa6c87429fb5f66ee677c44"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43bb833f0bf979d8475d38fbf09ed3b8a55e1885fe93ad3f93239fc6a4f17b98"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.15" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "0.7.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".alsa."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "alsa";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb213f6b3e4b1480a60931ca2035794aa67b73103d254715b1db7b70dcb3c934"; };
    dependencies = {
      alsa_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alsa-sys."0.3.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".alsa-sys."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "alsa-sys";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db8fee663d06c4e303404ef5f40488a53e062f89ba8bfed81f42325aafad1527"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.19" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".andrew."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "andrew";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c4afb09dd642feec8408e33f92f3ffc4052946f6b20f32fb99c1f58cd4fa7cf"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      rusttype = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusttype."0.9.2" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
      xdg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xdg."2.2.0" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "android_log-sys";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8052e2d8aabbb8d556d6abbcce2a22b9590996c5f849b9c7ce4544a2e3b984e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "android_log-sys";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85965b6739a430150bdd138e2374a98af0c3ee0d030b3bb7fc3bddff58d0102e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_logger."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "android_logger";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8cbd542dd180566fad88fd2729a53a62a734843c626638006a9d63ec0688484e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "regex" ]
    ];
    dependencies = {
      android_log_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.1.2" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ansi_term";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.35";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c0df63cb2955042487fad3aefd2c6e3ae7389ac5dc1beb28921de0b69f779d4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anymap."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "anymap";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "33954243bd79057c2de7338850b85983a44588021f8a5fee574a8888c6de4344"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f2a05fd1bd10b2527e20a2cd32d8873d115b8b39fe219ee25f42a8aca6ba278"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "072df7202e63b127ab55acfe16ce97013d5b97bf160489336d3f1840fd78e99e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ascii."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "ascii";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eab1c04a571841102f5345a8fc0f6bb3d31c315dec879b5c6e42e40ce7ffa34e"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ash."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "ash";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c69a8137596e84c22d57f3da1b5de1d4230b1742a710091c85f4d7ce50f00f38"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "libloading")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-channel."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "async-channel";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59740d83946db6a5af71ae25ddf9562c2b176b2ca42cf99a455f09f4a220d6b9"; };
    dependencies = {
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.1" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-executor."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "async-executor";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb877970c7b440ead138f6321a3b5395d6061183af779340b65e20c0fede9146"; };
    dependencies = {
      async_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.0.3" { inherit profileName; };
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.4.0" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.11.2" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
      vec_arena = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec-arena."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-task."4.0.3" = overridableMkRustCrate (profileName: rec {
    name = "async-task";
    version = "4.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e91831deabf0d6d7ec49552e489aed63b7456a7a3c46cff62adad428110b0af0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.42" = overridableMkRustCrate (profileName: rec {
    name = "async-trait";
    version = "0.1.42";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d3a45e77e34375a7923b1e8febb049bb011f064714a8e17a1a616fef01da13d"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "atomic";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3410529e8288c463bedb5930f82833bc0c90e5d2fe639a56582a4d09220b281"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "fallback" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".awc."2.0.3" = overridableMkRustCrate (profileName: rec {
    name = "awc";
    version = "2.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b381e490e7b0cfc37ebc54079b0413d8093ef43d14a4e4747083f7fa47a9e691"; };
    features = builtins.concatLists [
      [ "compress" ]
    ];
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.3.0" { inherit profileName; };
      actix_http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-http."2.2.0" { inherit profileName; };
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."1.1.1" { inherit profileName; };
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."1.0.6" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.13" { profileName = "__noProfile"; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      mime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
      serde_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.55" = overridableMkRustCrate (profileName: rec {
    name = "backtrace";
    version = "0.3.55";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef5140344c85b01f9bbb4d4b7288a8aa4b3287ccef913a14bcc78a1063623598"; };
    features = builtins.concatLists [
      [ "addr2line" ]
      [ "default" ]
      [ "gimli-symbolize" ]
      [ "miniz_oxide" ]
      [ "object" ]
      [ "std" ]
    ];
    dependencies = {
      addr2line = rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.14.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.3" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.22.0" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "base-x";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4521f3e3d031370679b3b140beb36dfe4801b09ac77e30c61941f97df3ef28b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3441f0f7b02788e948e47f457ca01f1d7e6d92c693bc132c22b087d3141c03ff"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".basedrop."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "basedrop";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e80d37a08696e321155da2faed6008661811fac02bf977afbc2fbefaffcb730"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c16660356e9a79666848ff247aecaa30d9a7bb233e902035140b32d47d0b1345"; };
    features = builtins.concatLists [
      [ "render" ]
    ];
    dependencies = {
      bevy_internal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_internal."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6b14f8ba7c373fdf7bd27547bb95f2849b2569bf02bbf3d19ca54e9d692de4f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "bevy_audio")
      (lib.optional (rootFeatures' ? "client/dynamic") "bevy_dylib")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "bevy_dynamic_plugin")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "bevy_gilrs")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "bevy_gltf")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "bevy_wgpu")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "bevy_winit")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "default")
      (lib.optional (rootFeatures' ? "client/dynamic") "dynamic")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "hdr")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "mp3")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "png")
      [ "render" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "x11")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/dynamic" then "bevy_dylib" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_dylib."0.5.0" { inherit profileName; };
      bevy_internal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_internal."0.5.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy-glsl-to-spirv."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "bevy-glsl-to-spirv";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d5f2f58f0aec3c50a20799792c3705e80dd7df327e79791cacec197e84e5e61"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_app";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d720bb8174ec9a7bc8f745ff821536a1d234d50fed205d2f8dc831e0577f76c9"; };
    dependencies = {
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.4.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_app";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "845be45f00d9c031071f8c68f7681bf791796634efa5f58937275337154cb019"; };
    features = builtins.concatLists [
      [ "bevy_reflect" ]
      [ "default" ]
    ];
    dependencies = {
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_asset";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f91a01d06319758b541ea1ed4a84e5b894194b56ece1fc3d09263e8830f06cdd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "filesystem_watcher" ]
      [ "notify" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.4.4" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
      notify = rustPackages."registry+https://github.com/rust-lang/crates.io-index".notify."5.0.0-pre.4" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_asset";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "426b3557161b34230e7ec04bdc48664509985ca7a6b874491f238eadd1e7cab0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "filesystem_watcher" ]
      [ "notify" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_diagnostic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.0" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
      notify = rustPackages."registry+https://github.com/rust-lang/crates.io-index".notify."5.0.0-pre.4" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.3" { inherit profileName; };
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_audio."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_audio";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3ca3cf9ce76696665e37a68b27ad6f6b0e2d0d85ccad36d8f018d3006812dbde"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "mp3")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "anyhow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_app" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_asset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_ecs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_reflect" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "rodio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rodio."0.13.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_core";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "918dac4225062e3517b63a186c6a4988eee167c7e90f42eeaa7a3c3943f9a1ff"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.4.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_core";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa5b6d7f68752cfb5b498fc5ea9ad5cfb5de871cdd4d894f2e046fef2e2898ea"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_derive";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96e17d375b833953cf0af3cabdf0aff02360591418e79db954b917bf1e6834fd"; };
    dependencies = {
      inflector = rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; };
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_derive";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd6fd06d325cfb4998b26fc84476380611ce6a2d0a8a99b501328c79d7bda104"; };
    dependencies = {
      inflector = rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; };
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_diagnostic";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7db1bd6b45976a460af49ad2e325b5594cd2ef29d153301f598bb0c6c2cfaf23"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_diagnostic";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2933425d2febac4a8aadc8aed05ddac2d5891c91ae60dd191b24a6e093dcbeba"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_dylib."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_dylib";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "efa62c7c03470969539a07337bf8c5694c0b952678fd081d68b6331842134b85"; };
    dependencies = {
      ${ if rootFeatures' ? "client/dynamic" then "bevy_internal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_internal."0.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_dynamic_plugin."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_dynamic_plugin";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d3219befe938ee89dd8b2b78a02cfd835ef93fa930113a91631b093381005ed"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_app" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ecs";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c412b6172d95ae55e405ca54462b0fb252531a4c3a12a5cac9eb533dcb4cf1b2"; };
    dependencies = {
      bevy_ecs_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs_macros."0.4.0" { profileName = "__noProfile"; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.3.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ecs";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "daf4745460111bd4285ed6c3e6caa4d882db95471edb02b88c6ad4eac89b923c"; };
    features = builtins.concatLists [
      [ "bevy_reflect" ]
      [ "default" ]
    ];
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.5.1" { inherit profileName; };
      bevy_ecs_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs_macros."0.5.0" { profileName = "__noProfile"; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.0" { inherit profileName; };
      fxhash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ecs_macros."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ecs_macros";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "92628e92dd65cef319dd059d1392a981e0c74a8bdd4889bcbbfac55799fa759b"; };
    dependencies = {
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ecs_macros."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ecs_macros";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "65323f6896068407b768c16ec1aa5c8891d49a28b725d0cbabc663d7f47baaec"; };
    dependencies = {
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_fly_camera."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_fly_camera";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f73c57d18a11c6135576fe34fa434640d2bc5a4c5ac4ea0eb0799bebc109b3a"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_gilrs."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_gilrs";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b28a12e991a63fe044605aacf806b8dcdc5aa3af2d4482ba6cb9a1b74fc9392"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_app" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_ecs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_input" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "gilrs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gilrs."0.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_gltf."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_gltf";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9233bfb7e2cf053b51f01d2e57ea5a549438c0e5f08735d595b6a6504d00639e"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "anyhow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "base64" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_app" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_asset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_ecs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_math" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_pbr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_reflect" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_render" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_scene" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_scene."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_transform" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "gltf" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf."0.15.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_input";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d2589b547ed2e48cc204acc670e8c3002e24ca9cabbe427bb4b31d339f628a1"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_input";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b91a3a768c59a5965f491cda74fd75a72b4cd7c51c85b5a731dd4d8688582dc5"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_internal."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_internal";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad383825249f68405bd143d88194fda471ad017baf5c3240870c8c38dad8d47f"; };
    features = builtins.concatLists [
      [ "bevy_pbr" ]
      [ "bevy_render" ]
      [ "bevy_sprite" ]
      [ "bevy_text" ]
      [ "bevy_ui" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.4.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.4.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.4.0" { profileName = "__noProfile"; };
      bevy_diagnostic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.4.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_pbr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.4.0" { inherit profileName; };
      bevy_scene = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_scene."0.4.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.4.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.4.0" { inherit profileName; };
      bevy_text = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.4.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.4.0" { inherit profileName; };
      bevy_ui = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ui."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.4.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_internal."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_internal";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53c568981b2911567cba7f6dae7190bac295ffd411bca777edb1b5152b1ccd62"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "bevy_audio")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "bevy_dynamic_plugin")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "bevy_gilrs")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "bevy_gltf")
      [ "bevy_pbr" ]
      [ "bevy_render" ]
      [ "bevy_sprite" ]
      [ "bevy_text" ]
      [ "bevy_ui" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "bevy_wgpu")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "bevy_winit")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "hdr")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "mp3")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "png")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "x11")
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_audio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_audio."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_diagnostic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_dynamic_plugin" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_dynamic_plugin."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_gilrs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_gilrs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_gltf" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_gltf."0.5.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.5.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_pbr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.5.0" { inherit profileName; };
      bevy_scene = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_scene."0.5.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.5.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.5.0" { inherit profileName; };
      bevy_text = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" { inherit profileName; };
      bevy_ui = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ui."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_wgpu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_wgpu."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bevy_winit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_winit."0.5.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_kira_audio."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_kira_audio";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "970b4307a7880a776fbb359da7c679dc701c0782aff556bebb61278a245a8fd8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/default") "ogg")
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      kira = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kira."0.5.3" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_log";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "463bf6a1e09f5738b5e3ab7e266ecd59dcd6cfc1d4bd9e9eb5a80825fd80e8ff"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_log_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.2.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "console_error_panic_hook" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.6" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.15" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "tracing_wasm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-wasm."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_log";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae100fe4e6fc8f7bbf28c121cda0ced7ab79088374beb7ab8be39120603beb18"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_log_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.2.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "console_error_panic_hook" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.6" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.15" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "tracing_wasm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-wasm."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_math";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cee6066dc393c913f3eb8873c3d3978010b1664b5947f6fa38c28be326da9735"; };
    dependencies = {
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.11.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_math";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb36a879cdc96f554b62dd7c7c02392a9a10e94082e4bc686a8242e1d674e7cc"; };
    dependencies = {
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.13.1" { inherit profileName; };
    };
  });
  
  "unknown".bevy_networking_turbulence."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_networking_turbulence";
    version = "0.3.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/patches/bevy_networking_turbulence");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/native" || rootFeatures' ? "server/native" || rootFeatures' ? "shared/native") "use-udp")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "use-webrtc")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "wasm-bindgen-futures")
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.5.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.8" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.11.2" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      naia_client_socket = rustPackages."unknown".naia-client-socket."0.6.0" { inherit profileName; };
      naia_server_socket = rustPackages."unknown".naia-server-socket."0.5.0" { inherit profileName; };
      turbulence = rustPackages."registry+https://github.com/rust-lang/crates.io-index".turbulence."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_pbr";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eadb5c93f5257279d2c88879e251c5064e244e88e288a7f640f986f04d0f046e"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.4.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.4.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.4.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.4.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.4.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_pbr";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71f267c27b70d298de91ceac644908fa876cb04857ccb80615dadb1ae969425f"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" { inherit profileName; };
    };
  });
  
  "unknown".bevy_prototype_frameshader."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_prototype_frameshader";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_prototype_frameshader");
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
      bevy_prototype_window_random_texture_node = rustPackages."unknown".bevy_prototype_window_random_texture_node."0.1.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/Nilirad/bevy_prototype_lyon".bevy_prototype_lyon."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "bevy_prototype_lyon";
    version = "0.1.3";
    registry = "git+https://github.com/Nilirad/bevy_prototype_lyon";
    src = fetchCrateGit {
      url = https://github.com/Nilirad/bevy_prototype_lyon;
      name = "bevy_prototype_lyon";
      version = "0.1.3";
      rev = "a18a305027a85ebb621c1096136f5edb8cd9eeb5";
      ref = "master";};
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.4.0" { inherit profileName; };
      lyon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lyon."0.16.2" { inherit profileName; };
    };
  });
  
  "unknown".bevy_prototype_transform_tracker."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_prototype_transform_tracker";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_prototype_transform_tracker");
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
    };
  });
  
  "unknown".bevy_prototype_window_random_texture_node."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_prototype_window_random_texture_node";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_prototype_window_random_texture_node");
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_reflect";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "511b41d40080cfb389b2b4d489c0ee0db9e66f09e88fa4ff6faef22c4610e777"; };
    features = builtins.concatLists [
      [ "bevy" ]
      [ "bevy_app" ]
      [ "bevy_ecs" ]
      [ "glam" ]
      [ "smallvec" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_reflect_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect_derive."0.4.0" { profileName = "__noProfile"; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      erased_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.3.12" { inherit profileName; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.11.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_reflect";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d7f57646077e9b016f079e0f39fe2826dce407bb0dccc29b481a33ef7552847"; };
    features = builtins.concatLists [
      [ "bevy" ]
      [ "glam" ]
      [ "smallvec" ]
    ];
    dependencies = {
      bevy_reflect_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      erased_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.3.12" { inherit profileName; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.13.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_reflect_derive."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_reflect_derive";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b40373d356ab3d8aac58c79dc3a56338f56632b55435f73fd009bc6f93ddddc0"; };
    dependencies = {
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_reflect_derive."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_reflect_derive";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cbc3f45d1d49c6e984b492ee13564677d1392828cac50c030e025f74f69386e1"; };
    dependencies = {
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_render";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f36bfed7edfcf8989e683e122df5384efdf15fd3237fdc2367191ce4722fe374"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.cpu.name == "wasm32") && !(hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "darwin") then "bevy_glsl_to_spirv" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy-glsl-to-spirv."0.2.1" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.4.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.4.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.4.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.4.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.2" { inherit profileName; };
      hexasphere = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hexasphere."3.4.0" { inherit profileName; };
      image = rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.23.12" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "darwin" then "shaderc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shaderc."0.7.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "spirv_reflect" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-reflect."0.2.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_render";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "765f2b966619d16bdb89132848461d9580a622acb5b2bba73cb252e43c9c8830"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "hdr")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "png")
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.cpu.name == "wasm32") && !(hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "darwin") then "bevy_glsl_to_spirv" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy-glsl-to-spirv."0.2.1" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.2" { inherit profileName; };
      hexasphere = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hexasphere."3.4.0" { inherit profileName; };
      image = rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.23.12" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "darwin" then "shaderc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shaderc."0.7.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "spirv_reflect" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-reflect."0.2.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_scene."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_scene";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3566aa31189d212785a902d49bf5d75aba32f633d531fe3f4ccf2e51715c7cc"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_scene."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_scene";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bf1eaa680e61749cc226bcdcd0d968c396fe52c2a4e9e1718422888953ba6c3b"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_sprite";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b89d4c644e8892f5b215d812c66fd42eb553352288e668076ee25068877e508"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.4.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.4.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      guillotiere = rustPackages."registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.0" { inherit profileName; };
      rectangle_pack = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rectangle-pack."0.2.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_sprite";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b9ddb7699b4597794071ebb93b5a0c414407ab8956dc4dc86e59dde721a663d"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" { inherit profileName; };
      guillotiere = rustPackages."registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.0" { inherit profileName; };
      rectangle_pack = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rectangle-pack."0.3.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_tasks";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73cb02453fab099d690d08f1688f91cd026f0f9f2d06d25629eed9d8b4418d58"; };
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.5.1" { inherit profileName; };
      async_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-executor."1.4.0" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.1" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.11.2" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_tasks";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77243565dde30ce01e538c615db54bc939a36e4c468b271e86a980004bac7bc9"; };
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.5.1" { inherit profileName; };
      async_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-executor."1.4.0" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.1" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.11.2" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_text";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "636546e42b1f8c5225f89c0408031e6e2c8c47fe2c06f611d4a678e722ec56c1"; };
    dependencies = {
      ab_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.7" { inherit profileName; };
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.4.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.4.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      glyph_brush_layout = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_text";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "21dfc4f2108582afd5a8995904ea55cd594787f210dac5d1df453cbe92eaab26"; };
    dependencies = {
      ab_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.7" { inherit profileName; };
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.35" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.5.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" { inherit profileName; };
      glyph_brush_layout = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_transform";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2655003cdb139b55ff2851b07345b83e910d7350c466635ad5db1a38169d2c56"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_transform";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d166fe11f67dc195b42207e7b096f36680f611afc8f4105b3d81865b66ecf91"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ui."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ui";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4bc722420aa0d2a8eb10ba5dd7b5aa2181d37e64d71a58df13fb461551c1278c"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.4.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.4.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.4.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.4.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.4.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.4.0" { inherit profileName; };
      bevy_text = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.4.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.4.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      stretch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stretch."0.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ui."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ui";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef67dfa943511b8bbca6bf730f183ac5c602a35a7659e58bdf7471154018889d"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.5.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.5.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.5.0" { inherit profileName; };
      bevy_text = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      stretch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stretch."0.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_utils";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e864ce079f076445c5fb0024f0762de5a617a3572f7ea15c015c9171bc124fd"; };
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.6.2" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_utils";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c384a69b670329f968f59abdcf6506f183cf18b8619d6ec1cbfe33e268e5da20"; };
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.4" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
    };
  });
  
  "unknown".bevy_web_fullscreen."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_web_fullscreen";
    version = "0.2.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/patches/bevy_web_fullscreen");
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.8" { inherit profileName; };
      gloo_events = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.1.1" { inherit profileName; };
      web_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "unknown".bevy_webgl2."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "bevy_webgl2";
    version = "0.5.2";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/patches/bevy_webgl2");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "bevy" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "regex" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "winit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.24.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_wgpu."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_wgpu";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5e16919cc645aa9a7e988c8644836d0f91c5f1bd23e17bdd9b461a32bf7667b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "bevy_winit")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_app" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_asset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_diagnostic" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_ecs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_render" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_window" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bevy_winit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_winit."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "crossbeam_channel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "crossbeam_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "futures_lite" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "wgpu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_window";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60c2b78591e1bf568d1aa9f663b6179d17ecf33517f7ac382981bcd7b47d8036"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.4.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.4.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.4.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.4.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_window";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b96496cb0a9c79ca6744a25e69edff4ba363c14b6070897a66a597db208405f0"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_winit."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_winit";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "522dcea62526be0aa5ee35781e98a9f309047050cf684758bc0cd498820111f6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "x11")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" then "bevy_app" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" then "bevy_ecs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" then "bevy_input" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" then "bevy_log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" then "bevy_math" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" then "bevy_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" then "bevy_window" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.5.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" then "winit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.24.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bincode";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d175dfa69e619905c4c3cdb7c3c203fa3bdd5d51184e3afdb2742c0280493772"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.56.0" = overridableMkRustCrate (profileName: rec {
    name = "bindgen";
    version = "0.56.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2da379dbebc0b76ef63ca68d8fc6e71c0f13e59432e0987e508c1820e6ab5239"; };
    features = builtins.concatLists [
      [ "runtime" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cexpr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.4.0" { inherit profileName; };
      clang_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.0.3" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      lazycell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      peeking_take_while = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      shlex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "bit-set";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e11e16035ea35e4e5997b393eacbf6f63983188f7a2ad25bfb13465f5ad59de"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bit_vec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-vec";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "block";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"; };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".brotli-sys."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "brotli-sys";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4445dea95f4c2b41cde57cc9fee236ae4dbae88d8fcbdb4750fc1bb5d86aaecd"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".brotli2."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "brotli2";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0cb036c3eade309815c15ddbacec5b22c4d1f3983a774ab2eac2e3e9ea85568e"; };
    dependencies = {
      brotli_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".brotli-sys."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e8c087f005730276d1096a652e92a8bacee2e2472bcc9715a74d2bec38b5820"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "41aa2ec95ca3b5c54cf73c91acf06d24f4495d5f1b1c12506ae3483d646177ac"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "0.5.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e4cec68f03f32e44924783795810fa50a7035d8c8ebe78580ad7e6c703fba38"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b700ce4376041dcd0a327fd0097c41095743c4c8af8887265942faf1100bd040"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytestring."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "bytestring";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90706ba19e97b90786e19dc0d5e2abd80008d99d4c0c5d1ad0b5e72cec7c494d"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cache-padded."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "cache-padded";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "631ae5198c9be5e753e5cc215e1bd73c2b466a3565173db433f52bb9d3e66dba"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".calloop."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "calloop";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b036167e76041694579972c28cf4877b4f92da222560ddb49008937b6a6727c"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.66";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c0496836a84f8d0495758516b8621a622beb77c0fed418570e50764093ced48"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "jobserver")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "parallel")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "jobserver" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cesu8";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cexpr."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "cexpr";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4aedb84272dbe89af497cf81375129abda4fc0a9e7c5d317498c15cc30c0d27"; };
    dependencies = {
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."5.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "cfg_aliases";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" = overridableMkRustCrate (profileName: rec {
    name = "chrono";
    version = "0.4.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73"; };
    features = builtins.concatLists [
      [ "clock" ]
      [ "default" ]
      [ "libc" ]
      [ "oldtime" ]
      [ "std" ]
      [ "time" ]
      [ "winapi" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.1.44" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chunked_transfer."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "chunked_transfer";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7477065d45a8fe57167bf3cf8bcd3729b54cfcb81cca49bda2d038ea89ae82ca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "clang-sys";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0659001ab56b791be01d4b729c44376edc6718cf389a502e579b77b758f3296c"; };
    features = builtins.concatLists [
      [ "clang_3_5" ]
      [ "clang_3_6" ]
      [ "clang_3_7" ]
      [ "clang_3_8" ]
      [ "clang_3_9" ]
      [ "clang_4_0" ]
      [ "clang_5_0" ]
      [ "clang_6_0" ]
      [ "libloading" ]
      [ "runtime" ]
    ];
    dependencies = {
      glob = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.6" { inherit profileName; };
    };
    buildDependencies = {
      glob = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".client."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "client";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/client");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "bevy_fly_camera")
      (lib.optional (rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web") "bevy_webgl2")
      (lib.optional (rootFeatures' ? "client/debug-fly-camera") "debug-fly-camera")
      (lib.optional (rootFeatures' ? "client/default") "default")
      (lib.optional (rootFeatures' ? "client/dynamic") "dynamic")
      (lib.optional (rootFeatures' ? "client/inspect-control-config") "inspect-control-config")
      (lib.optional (rootFeatures' ? "client/native") "native")
      (lib.optional (rootFeatures' ? "client/web") "web")
    ];
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "bevy_fly_camera" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_fly_camera."0.7.0" { inherit profileName; };
      bevy_kira_audio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_kira_audio."0.5.0" { inherit profileName; };
      bevy_prototype_frameshader = rustPackages."unknown".bevy_prototype_frameshader."0.1.0" { inherit profileName; };
      bevy_prototype_lyon = rustPackages."git+https://github.com/Nilirad/bevy_prototype_lyon".bevy_prototype_lyon."0.1.3" { inherit profileName; };
      bevy_prototype_transform_tracker = rustPackages."unknown".bevy_prototype_transform_tracker."0.1.0" { inherit profileName; };
      bevy_web_fullscreen = rustPackages."unknown".bevy_web_fullscreen."0.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/web" then "bevy_webgl2" else null } = rustPackages."unknown".bevy_webgl2."0.5.2" { inherit profileName; };
      crystalorb_bevy_networking_turbulence = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crystalorb-bevy-networking-turbulence."0.2.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.3" { inherit profileName; };
      shared = rustPackages."unknown".shared."0.1.0" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      wasm_bindgen_console_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-console-logger."0.1.1" { inherit profileName; };
      web_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      winit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.24.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.45" = overridableMkRustCrate (profileName: rec {
    name = "cmake";
    version = "0.1.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb6210b637171dfba4cda12e579ac6dc73f5165ad56133e5d72ef3131f320855"; };
    dependencies = {
      cc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "cocoa";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f63902e9223530efb4e26ccd0cf55ec30d592d3b42e21a28defc42a9586e832"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      cocoa_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      core_graphics = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.2" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cocoa-foundation";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ade49b65d560ca58c403a479bb396592b155c0185eada742ee323d1d68d6318"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "color_quant";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".combine."3.8.1" = overridableMkRustCrate (profileName: rec {
    name = "combine";
    version = "3.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da3da6baa321ec19e1cc41d31bf599f00c783d0517095cdaf0332e3fe8d20680"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ascii = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ascii."0.9.3" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
      unreachable = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unreachable."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".combine."4.4.0" = overridableMkRustCrate (profileName: rec {
    name = "combine";
    version = "4.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9417a0c314565e2abffaece67e95a8cb51f9238cd39f3764d9dfdf09e72b20c"; };
    features = builtins.concatLists [
      [ "bytes_05" ]
      [ "default" ]
      [ "pin-project" ]
      [ "pin-project-lite" ]
      [ "std" ]
    ];
    dependencies = {
      bytes_05 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.11" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" = overridableMkRustCrate (profileName: rec {
    name = "concurrent-queue";
    version = "1.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "30ed07550be01594c6026cff2a1d7fe9c8f683caa798e12b68694ac9e88286a3"; };
    dependencies = {
      cache_padded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cache-padded."1.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "console_error_panic_hook";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8d976903543e0c48546a91908f21588a680a8c8f984df9a5d69feccb2b2a211"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const_fn."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "const_fn";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cd51eab21ab4fd6a3bf889e2d0958c0a6e3a61ad04260325e919e652a2a62826"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".convert_case."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "convert_case";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cookie."0.14.3" = overridableMkRustCrate (profileName: rec {
    name = "cookie";
    version = "0.14.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "784ad0fbab4f3e9cef09f20e0aea6000ae08d2cb98ac4c0abc53df18803d702f"; };
    features = builtins.concatLists [
      [ "percent-encode" ]
      [ "percent-encoding" ]
    ];
    dependencies = {
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.2.23" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cookie_store."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "cookie_store";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3818dfca4b0cb5211a659bbcbb94225b7127407b2b135e650d717bfb78ab10d3"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      cookie = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cookie."0.14.3" { inherit profileName; };
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      publicsuffix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".publicsuffix."1.5.4" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.2.23" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "copyless";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2df960f5d869b2dd8532793fde43eb5427cceb126c929747a26823ab0eeb536"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "core_foundation_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57d24c7a13c43e870e37c1556b74555437870a04514f7685f5b354e090567171"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0a89e2ae426ea83155dccf10c0fa6b1463ef6d5fcb44cee0b224a408fa640a62"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3a71ab494c0b5b860bdc8407ae08978052417070c2ced38573a9157ad75b8ac"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea221b5284a47e40033bf9b66f35f984ec0ea2931eb03505246cd27a963f981b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.19.2" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.19.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3889374e6ea6ab25dba90bb5d96202f61108058361f6dc72e8b03e6f8bbe923"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.7.0" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.2" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.22.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "269f35f69b542b80e736a20a89a05215c0ce80c2c03c514abb2e318b78379d86"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a68b68b3446082644c91ac778bf50cd4104bfb002b5a6a7c44cca5a2c70788b"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-video-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "core-video-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34ecad23610ad9757664d644e369246edde1803fcb43ed72876565098a5d3828"; };
    features = builtins.concatLists [
      [ "core-graphics" ]
      [ "display_link" ]
      [ "opengl" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" { inherit profileName; };
      core_graphics = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.19.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".coreaudio-rs."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "coreaudio-rs";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f229761965dad3e9b11081668a6ea00f1def7aa46062321b5ec245b834f6e491"; };
    features = builtins.concatLists [
      [ "audio_unit" ]
      [ "core_audio" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      coreaudio_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".coreaudio-sys."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".coreaudio-sys."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "coreaudio-sys";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b7e3347be6a09b46aba228d6608386739fb70beff4f61e07422da87b0bb31fa"; };
    features = builtins.concatLists [
      [ "audio_unit" ]
      [ "core_audio" ]
    ];
    buildDependencies = {
      bindgen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.56.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpal."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "cpal";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05631e2089dfa5d3b6ea1cfbbfd092e2ee5deeb69698911bc976b28b746d3657"; };
    features = builtins.concatLists [
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "alsa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alsa."0.4.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_foundation_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "coreaudio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".coreaudio-rs."0.9.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "jni" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.17.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.2.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.15.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "oboe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe."0.3.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.1.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpuid-bool."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "cpuid-bool";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8aebca1129a03dc6dc2b127edd729435bbc4a37e1d5f4d7513165089ceb02634"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b153fe7cbef478c567df0f972e02e6d736db11affe43dfc9c56a9374d1adfb87"; };
    dependencies = {
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.7.2" { inherit profileName; };
      maybe_uninit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".maybe-uninit."2.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dca26ee1f8d361640700bde38b2c37d8c22b3ce2d360e1fc1c74ea4b0aa7d775"; };
    features = builtins.concatLists [
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7e9d99fa91428effe99c5c6d4634cdeba32b8cf784fc428a2a687f61a952c49"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crystalorb."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "crystalorb";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35883ee7cc175baa745800882e3d3407a833bbc410f21bd422c342555abe8f58"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      take_mut = rustPackages."registry+https://github.com/rust-lang/crates.io-index".take_mut."0.2.2" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crystalorb-bevy-networking-turbulence."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "crystalorb-bevy-networking-turbulence";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a15388b1f79d1ab6670447215affc839cf97ef61a17ed3716947a126793f7465"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/native" || rootFeatures' ? "server/native" || rootFeatures' ? "shared/native") "use-udp")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "use-webrtc")
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_networking_turbulence = rustPackages."unknown".bevy_networking_turbulence."0.3.0" { inherit profileName; };
      crystalorb = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crystalorb."0.2.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      turbulence = rustPackages."registry+https://github.com/rust-lang/crates.io-index".turbulence."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".d3d12."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "d3d12";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0a60cceb22c7c53035f8980524fdc7f17cf49681a3c154e6757d30afbec6ec4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "libloading")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.6" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d706e75d87e35569db781a9b5e2416cff1236a47ed380831f959382ccd5f858"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "suggestions" ]
    ];
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" { inherit profileName; };
      darling_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.10.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0c960ae2da4de88a91b2d920c2a7233b400bc33cb28453a2987822d8392519b"; };
    features = builtins.concatLists [
      [ "strsim" ]
      [ "suggestions" ]
    ];
    dependencies = {
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      ident_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      strsim = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.9.3" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b5a2f4ac4969822c62224815d069952656cadc7084fdca9751e6d959189b72"; };
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deflate."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "deflate";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73770f8e1fe7d64df17ca66ad28994a0a623ea497fa69486e14984e715c5d174"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "adler32" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler32."1.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derivative."2.1.1" = overridableMkRustCrate (profileName: rec {
    name = "derivative";
    version = "2.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cb582b60359da160a9477ee80f15c8d784c477e69c217ef2cdd4169c24ea380f"; };
    features = builtins.concatLists [
      [ "use_core" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.13" = overridableMkRustCrate (profileName: rec {
    name = "derive_more";
    version = "0.99.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f82b1b72f1263f214c0f823371768776c4f5841b942c9883aa8e5ec584fd0ba6"; };
    features = builtins.concatLists [
      [ "add" ]
      [ "add_assign" ]
      [ "as_mut" ]
      [ "as_ref" ]
      [ "constructor" ]
      [ "convert_case" ]
      [ "default" ]
      [ "deref" ]
      [ "deref_mut" ]
      [ "display" ]
      [ "error" ]
      [ "from" ]
      [ "from_str" ]
      [ "index" ]
      [ "index_mut" ]
      [ "into" ]
      [ "into_iterator" ]
      [ "is_variant" ]
      [ "iterator" ]
      [ "mul" ]
      [ "mul_assign" ]
      [ "not" ]
      [ "sum" ]
      [ "try_into" ]
    ];
    dependencies = {
      convert_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".convert_case."0.4.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".discard."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "discard";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "212d0f5754cb6769937f4501cc0e67f4f4483c8d2c3e1e922ee9edbe4ab4c7c0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "dispatch";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlib."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "dlib";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b11f15d1e3268f140f68d390637d5e76d849782d971ae7063e0da69fe9709a76"; };
    features = builtins.concatLists [
      [ "dlopen" ]
    ];
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast-rs";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.28" = overridableMkRustCrate (profileName: rec {
    name = "encoding_rs";
    version = "0.8.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80df024fbc5ac80f87dfef0d9f5209a252f2a497f7f42944cff24d8253cac065"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-as-inner."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "enum-as-inner";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c5f0096a91d210159eceb2ff5e1c4da18388a170e1e3ce948aac9c8fdbbf595"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.2" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44533bbbb3bb3c1fa17d9f2e4e38bbbaf8396ba82193c4cb1b6445d711445d36"; };
    features = builtins.concatLists [
      [ "regex" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.3.12" = overridableMkRustCrate (profileName: rec {
    name = "erased-serde";
    version = "0.3.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ca8b296792113e1500fd935ae487be6e00ce318952a6880555554824d6ebf38"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".error-chain."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "error-chain";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2d2f06b9cac1506ece98fe3231e3cc9c4410ec3d5b1f24ae1c8946f0742cdefc"; };
    features = builtins.concatLists [
      [ "backtrace" ]
    ];
    dependencies = {
      backtrace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.55" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.1" = overridableMkRustCrate (profileName: rec {
    name = "euclid";
    version = "0.22.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5337024b8293bdce5265dc9570ef6e608a34bfacbbc87fe1a5dcb5f1dac2f4e2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.1" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "2.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7531096570974c3a9dcf9e4b8e1cede1ec26cf5046219fb3b9d897503b9be59"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca5faf057445ce5c9d4329e382b2ce7ca38550ef3b73a5348362d5f24e0c7fe3"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fetch_unroll."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "fetch_unroll";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c8d44807d562d137f063cbfe209da1c3f9f2fa8375e11166ef495daab7b847f9"; };
    dependencies = {
      libflate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libflate."1.0.3" { inherit profileName; };
      tar = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tar."0.4.30" { inherit profileName; };
      ureq = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ureq."1.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.13" = overridableMkRustCrate (profileName: rec {
    name = "filetime";
    version = "0.2.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c122a393ea57648015bf06fbd3d372378992e86b9ff5a7a497b076a28c79efe"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.1.57" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "find-crate";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "057a1d48e8ff33649ee2d7c510b79ecf1f8a52b684d446a72de600ad7e2823b6"; };
    dependencies = {
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e08c8bc7575d7e091fe0706963bd22e2a4be6a64da995f03b2a5a57d66ad015"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "398ea4fabe40b9b0d885340a2a991a44c8a645624075ad966d21f88688e2b69e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.20" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cd3aec53de10fe96d7d8c565eb17f2c687bb5518a2ec453b5b1252964526abe0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "miniz_oxide" ]
      [ "rust_backend" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      foreign_types_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ece68d15c92e84fa4f19d3780f1294e5ca82a78a6d515f1efaabcc144688be00"; };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fsevent."2.0.2" = overridableMkRustCrate (profileName: rec {
    name = "fsevent";
    version = "2.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97f347202c95c98805c216f9e1df210e8ebaec9fdb2365700a43c10797a35e63"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      fsevent_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fsevent-sys."3.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fsevent-sys."3.0.2" = overridableMkRustCrate (profileName: rec {
    name = "fsevent-sys";
    version = "3.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77a29c77f1ca394c3e73a9a5d24cfcabb734682d9634fc398f2204a63c994120"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fuchsia-cprng."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "fuchsia-cprng";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "fuchsia-zircon";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      fuchsia_zircon_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "fuchsia-zircon-sys";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b3b0c040a1fe6529d30b3c5944b280c7f0dcb2930d2c3062bca967b602583d0"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "default" ]
      [ "executor" ]
      [ "futures-executor" ]
      [ "std" ]
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.8" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.8" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.8" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4b7109687aa4e177ef6fe84553af6280ef2778bdb7783ba44c9dc3399110fe64"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "futures-sink" ]
      [ "sink" ]
      [ "std" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "847ce131b72ffb13b6109a221da9ad97a64cbe48feb1028356b836b47b8f1748"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4caa2b2b68b880003057c1dd49f1ed937e38f22fcf6c212188a121f08cf40a65"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "611834ce18aaa1bd13c4b374f5d653e1027cf99b6b502584ff8c9a64413b30bb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.11.2" = overridableMkRustCrate (profileName: rec {
    name = "futures-lite";
    version = "1.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e6c079abfac3ab269e2927ec048dabc89d009ebfdda6b8ee86624f30c689658"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fastrand" ]
      [ "futures-io" ]
      [ "parking" ]
      [ "std" ]
      [ "waker-fn" ]
    ];
    dependencies = {
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.4.0" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.8" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
      parking = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.0.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.11" { inherit profileName; };
      waker_fn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77408a692f1f97bcc61dc001d752e00643408fbc922e4d634c655df50d595556"; };
    dependencies = {
      proc_macro_hack = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" { profileName = "__noProfile"; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f878195a49cee50e006b02b93cf7e0a95a38ac7b776b4c4d9cc1207cd20fcb3d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c554eb5bf48b2426c4771ab68c6b14468b6e76cc90996f528c3338d761a4d0d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "once_cell" ]
      [ "std" ]
    ];
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" = overridableMkRustCrate (profileName: rec {
    name = "futures-timer";
    version = "3.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e64b03909df88034c26dc1547e8970b91f98bdb65165d6a4e9110d94263dbb2c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "gloo-timers")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "send_wrapper")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "wasm-bindgen")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "gloo_timers" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-timers."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "send_wrapper" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".send_wrapper."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d304cff4a7b99cfb7986f7d43fbe93d175e72e704a8860787cc95e9ffd85cbd2"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "async-await-macro" ]
      [ "channel" ]
      [ "default" ]
      [ "futures-channel" ]
      [ "futures-io" ]
      [ "futures-macro" ]
      [ "futures-sink" ]
      [ "io" ]
      [ "memchr" ]
      [ "proc-macro-hack" ]
      [ "proc-macro-nested" ]
      [ "sink" ]
      [ "slab" ]
      [ "std" ]
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.8" { inherit profileName; };
      futures_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.8" { profileName = "__noProfile"; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.8" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.8" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.2" { inherit profileName; };
      pin_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; };
      proc_macro_hack = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" { profileName = "__noProfile"; };
      proc_macro_nested = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-nested."0.1.6" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "fxhash";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generational-arena."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "generational-arena";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e1d3b771574f62d0548cee0ad9057857e9fc25d7a3335f140c84f6acd0bf601"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generator."0.6.23" = overridableMkRustCrate (profileName: rec {
    name = "generator";
    version = "0.6.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8cdc09201b2e8ca1b19290cf7e65de2246b8e91fb6874279722189c4de7b94dc"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.4" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817"; };
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.15" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.1.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fc587bc0ec293155d5bfa6b9891ec18a1e330c234f896ea47fbada4cadbe47e6"; };
    features = builtins.concatLists [
      [ "std" ]
      [ "stdweb" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.config == "wasm32-unknown-unknown" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" { inherit profileName; };
      ${ if hostPlatform.config == "wasm32-unknown-unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753"; };
    features = builtins.concatLists [
      [ "js" ]
      [ "js-sys" ]
      [ "std" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.0+wasi-snapshot-preview1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-auxil";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7b33ecf067f2117668d91c9b0f2e5f223ebd1ffec314caa2f3de27bb580186d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "spirv_cross")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "fxhash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "spirv_cross" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-dx11."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-dx11";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f851d03c2e8f117e3702bf41201a4fafa447d5cb1276d5375870ae7573d069dd"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "auxil" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.6" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "range_alloc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "spirv_cross" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "thunderdome" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thunderdome."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "wio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wio."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-dx12."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-dx12";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5032d716a2a5f4dafb4675a794c5dc32081af8fbc7303c93ad93ff5413c6559f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bit_set" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "native" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".d3d12."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "auxil" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "range_alloc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "spirv_cross" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "thunderdome" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thunderdome."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-empty."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-empty";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f07ef26a65954cfdd7b4c587f485100d1bb3b0bd6a51b02d817d6c87cca7a91"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "gfx_hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-gl."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-gl";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6717c50ab601efe4a669bfb44db615e3888695ac8263222aeaa702642b9fbc2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "naga")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "auxil" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "glow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glow."0.7.2" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && !(hostPlatform.parsed.cpu.name == "wasm32") then "egl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".khronos-egl."3.0.2" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && !(hostPlatform.parsed.cpu.name == "wasm32") then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.6" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "naga" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "spirv_cross" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-metal."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-metal";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8dc54b456ece69ef49f8893269ebf24ac70969ed34ba2719c3f3abcc8fbff14e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "naga")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "block" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "cocoa_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "copyless" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "foreign_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "auxil" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "metal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".metal."0.21.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "naga" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "range_alloc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "spirv_cross" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "storage_map" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".storage-map."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-vulkan."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-vulkan";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dabe88b1a5c91e0f969b441cc57e70364858066e4ba937deeb62065654ef9bd9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "naga")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "ash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ash."0.31.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.kernel.name == "darwin" then "core_graphics_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "inplace_it" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inplace_it."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "naga" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-hal";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1d9cc8d3b573dda62d0baca4f02e0209786e22c562caff001d77c389008781d"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "naga" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gilrs."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "gilrs";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b64ac678e1174eb012be1cfd409ff2483f23cb79bc880ce4737147245b0fbff"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "fnv" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "gilrs_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gilrs-core."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.cpu.name == "wasm32" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "uuid" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "vec_map" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gilrs-core."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "gilrs-core";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1024d4046c5c67d2adb8c90f6ed235163b58e05d35a63bf699b53f0cceeba2c6"; };
    dependencies = {
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.6.4" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.kernel.name == "darwin" then "io_kit_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-kit-sys."0.1.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.kernel.name == "linux" then "libudev_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libudev-sys."0.1.4" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.kernel.name == "linux" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.kernel.name == "windows" then "rusty_xinput" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusty-xinput."1.2.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.cpu.name == "wasm32" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "uuid" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "darwin") then "vec_map" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6503fe142514ca4799d4c26297c4248239fe8838d827db6bd6065c6ed29a6ce"; };
    features = builtins.concatLists [
      [ "read" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glam."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "glam";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef81f244b2a421ddb8ccb382857772379c0996fe5948992db5bee51cef3c28e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glam."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "glam";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70155b56080764b8b758e91e4c63d06da0262c0c939f2cd991cd1382087147df"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "spirv" then "spirv_std" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-std."0.4.0-alpha.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glam."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "glam";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3abb554f8ee44336b72d522e0a7fe86a29e09f839a36022fa869a7dfe941a54b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "glob";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "gloo-events";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "088514ec8ef284891c762c88a66b639b3a730134714692ee31829765c5bc814f"; };
    dependencies = {
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      web_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gloo-timers."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "gloo-timers";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "47204a46aaff920a1ea58b11d03dec6f704287d27561724a4631e450654a891f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "default")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "futures")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "futures-channel")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "futures-core")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "futures_channel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "futures_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glow."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "glow";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "072136d2c3783f3a92f131acb227bc806d3886278e2a4dc1e9990ec89ef9e70b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "js-sys")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "wasm-bindgen")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "web-sys")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "web_sys")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "slotmap" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."0.4.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "gltf";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d6fb0d1d772daf10ea74528c3aeb12215f6d5b820adf2ecfc93a6578d6779c3c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "KHR_materials_unlit")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "names")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "utils")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "gltf_json" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf-json."0.15.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf-derive."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "gltf-derive";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6636de7bf52227363554f1ca2d9cd180fc666129ddd0933097e1f227dfa7293"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "inflections" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inflections."1.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf-json."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "gltf-json";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3fc3deb81e6fa04bf808f6be7c3983229552a95b77f687ad96af00f6d3e7d6c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "KHR_materials_unlit")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "names")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "gltf_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf-derive."0.15.2" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "serde_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.118" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "serde_json" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush_layout";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10bc06d530bf20c1902f1b02799ab7372ff43f6119770c49b0bc3f21bd148820"; };
    dependencies = {
      ab_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.7" { inherit profileName; };
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.4.0" { inherit profileName; };
      xi_unicode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e7724b9aef57ea36d70faf54e0ee6265f86e41de16bed8333efdeab5b00e16b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "std")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "tracing")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "gpu_alloc_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "tracing" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc-types";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54804d0d6bc9d7f26db4eaec1ad10def69b599315f487d32c334a80d1efe67a5"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e8a70f1e87a3840ed6a3e99e02c2b861e4dbdf26f0d07e38f42ea5aff46cfce2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "std")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "tracing")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "gpu_descriptor_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "hashbrown" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.9.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "tracing" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "363e3677e55ad168fef68cf9de3a4a310b53124c5e784c53a1d70e92d23f2126"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "guillotiere";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc7cccefbf418f663e11e9500326f46a44273dc598210bbedc8bbe95e696531f"; };
    dependencies = {
      euclid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.1" { inherit profileName; };
      svg_fmt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".svg_fmt."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".h2."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "h2";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e4728fd124914ad25e99e3d15a9361a879f6620f63cb56bbb08f95abb97a535"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.2" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.6.1" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."0.2.25" { inherit profileName; };
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.3.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
      tracing_futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-futures."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ahash")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "inline-more")
      [ "raw" ]
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "ahash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.4.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87cbf45460356b7deeb5e3415b5563308c0a9b057c85e12b06ad551f98d0a6ac"; };
    dependencies = {
      unicode_segmentation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.17" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.1.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aca5565f760fb5b220e499d72710ed156fdb74e631659e99377d9ebfbd13ae8"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "644f9158b2f133fd50f5fb3242878846d9eb792e445c893805ff0e3824006e35"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hexasphere."3.4.0" = overridableMkRustCrate (profileName: rec {
    name = "hexasphere";
    version = "3.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "497fa99092cc737fe649ae39194b515fbc15ae27ebd437c9e3d9c8210341e0fc"; };
    dependencies = {
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.15.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hostname."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "hostname";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c731c3e10504cc8ed35cfe2f1db4c9274c3d35fa486e3b31df46f068ef3e867"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      match_cfg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".match_cfg."0.1.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "http";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "84129d298a6d57d246960ff8eb831ca4af3f96d29e2e28848dae275408658e26"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".httparse."1.3.5" = overridableMkRustCrate (profileName: rec {
    name = "httparse";
    version = "1.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "615caabe2c3160b313d52ccc905335f4ed5f10881dd63dc5699d47e90be85691"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ident_case";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9"; };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      unicode_bidi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.4" { inherit profileName; };
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.16" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".image."0.23.12" = overridableMkRustCrate (profileName: rec {
    name = "image";
    version = "0.23.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ce04077ead78e39ae8610ad26216aed811996b043d47beed5090db674f9e9b5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "hdr")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "png")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "scoped_threadpool")
    ];
    dependencies = {
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.4.1" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      color_quant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" { inherit profileName; };
      num_iter = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.42" { inherit profileName; };
      num_rational = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.3.2" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "png" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".png."0.16.8" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "scoped_threadpool" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped_threadpool."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fb1fa934250de4de8aef298d81c729a7d33d8c239daa3a7575e6b92bfc7313b"; };
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.9.1" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inflections."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "inflections";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a257582fdcde896fd96463bf2d40eefea0580021c0712a0e2b028b60b47a837a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inotify."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "inotify";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46dd0a94b393c730779ccfd2a872b67b1eb67be3fc33082e733bdb38b5fde4d4"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      inotify_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inotify-sys."0.1.4" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inotify-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "inotify-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4563555856585ab3180a5bf0b2f9f8d301a728462afffc8195b3f5394229c55"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inplace_it."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "inplace_it";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90953f308a79fe6d62a4643e51f848fbfddcd05975a38e69fdf4ab86a7baf7ca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61124eeebbd69b8190558df225adf7e4caafce0d743919e5d6b19652314ec5ec"; };
    features = builtins.concatLists [
      [ "js-sys" ]
      [ "now" ]
      [ "stdweb" ]
      [ "time" ]
      [ "wasm-bindgen" ]
      [ "wasm-bindgen_rs" ]
      [ "web-sys" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.2.23" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "wasm_bindgen_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".io-kit-sys."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "io-kit-sys";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f21dcc74995dd4cd090b147e79789f8d65959cbfb5f0b118002db869ea3bd0a0"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "core_foundation_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "iovec";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ipconfig."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "ipconfig";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7e2f18aece9709094573a9f24f483c4f65caa4298e2f7ae1b71cc65d853fad7"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "socket2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.3.19" { inherit profileName; };
      ${ if hostPlatform.isWindows then "widestring" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".widestring."0.4.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winreg" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winreg."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc6f3ad7b9d11a0c00842ff8de1b60ee58661048eb8049ed33c73594f359d7e6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "jni";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1981310da491a4f0f815238097d0d43d8072732b5ae5f8bd0d8eadf5bf245402"; };
    features = builtins.concatLists [
      [ "backtrace" ]
      [ "default" ]
    ];
    dependencies = {
      cesu8 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" { inherit profileName; };
      combine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."3.8.1" { inherit profileName; };
      error_chain = rustPackages."registry+https://github.com/rust-lang/crates.io-index".error-chain."0.12.4" { inherit profileName; };
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
    };
    buildDependencies = {
      walkdir = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni."0.17.0" = overridableMkRustCrate (profileName: rec {
    name = "jni";
    version = "0.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "36bcc950632e48b86da402c5c077590583da5ac0d480103611d5374e7c967a3c"; };
    features = builtins.concatLists [
      [ "backtrace" ]
      [ "default" ]
    ];
    dependencies = {
      cesu8 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" { inherit profileName; };
      combine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.4.0" { inherit profileName; };
      error_chain = rustPackages."registry+https://github.com/rust-lang/crates.io-index".error-chain."0.12.4" { inherit profileName; };
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
    };
    buildDependencies = {
      walkdir = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jni-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c71313ebb9439f74b00d9d2dcec36440beaf57a6aa0623068441dd7cd81a7f2"; };
    dependencies = {
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.46";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf3d7383929f7c9c7c2d0fa596f325832df98c3704f2c60553080f7127a58175"; };
    dependencies = {
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "kernel32-sys";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
    buildDependencies = {
      build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".khronos-egl."3.0.2" = overridableMkRustCrate (profileName: rec {
    name = "khronos-egl";
    version = "3.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b19cc4a81304db2a0ad69740e83cdc3a9364e3f9bd6d88a87288a4c2deec927b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "1_0")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "1_1")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "1_2")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "1_3")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "1_4")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "1_5")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dynamic")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "libloading")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kira."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "kira";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e7a756bb5de5a0dea42a6f514037db18736b56c9e2313928746025721f9cca0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/default") "lewton")
      (lib.optional (rootFeatures' ? "client/default") "ogg")
    ];
    dependencies = {
      atomic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic."0.5.0" { inherit profileName; };
      basedrop = rustPackages."registry+https://github.com/rust-lang/crates.io-index".basedrop."0.1.1" { inherit profileName; };
      cpal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpal."0.13.1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.6.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      ${ if rootFeatures' ? "client/default" then "lewton" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lewton."0.10.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.3" { inherit profileName; };
      ringbuf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ringbuf."0.2.5" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32" then "uuid" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".language-tags."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "language-tags";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a91d884b6667cd606bb5a69aa0c99ba811a115fc68915e7056ec08a46e93199a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lazycell";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lewton."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "lewton";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "777b48df9aaab155475a83a7df3070395ea1ac6902f5cd062b8f2b028075c030"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/default") "default")
      (lib.optional (rootFeatures' ? "client/default") "ogg")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/default" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      ${ if rootFeatures' ? "client/default" then "ogg" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ogg."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/default" then "tinyvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.95";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "789da6d93f1b866ffe175afc5322a4d76c038605a1c3319bb57b06967ca98a36"; };
    features = builtins.concatLists [
      [ "align" ]
      [ "default" ]
      [ "extra_traits" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "use_std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libflate."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "libflate";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "389de7875e06476365974da3e7ff85d55f1972188ccd9f6020dd7c8156e17914"; };
    dependencies = {
      adler32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler32."1.2.0" { inherit profileName; };
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.1" { inherit profileName; };
      libflate_lz77 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libflate_lz77."1.0.0" { inherit profileName; };
      rle_decode_fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rle-decode-fast."1.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libflate_lz77."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "libflate_lz77";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3286f09f7d4926fc486334f28d8d2e6ebe4f7f9994494b6dab27ddfad2c9b11b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.6" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.6.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e9367bdfa836b7e3cf895867f7a570283444da90562980ec2263d6e1569b16bc"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f84d96438c15fcd6c3f244c8fce01d1e2b9c6b5623e9c711dc9286d8fc92d6a"; };
    dependencies = {
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fc7aa29613bd6a620df431842069224d8bc9011086b1db4c0e0cd47fa03ec9a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "stable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c7d73b3f436185384286bd8098d17ec07c9a7d2388a6599f824d8502b529702a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libudev-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "libudev-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c8469b4a23b962c1396b9b451dda50ef5b283e8dd309d69033475fa9b334324"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.19" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "linked-hash-map";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fb9b38af92608140b86b693604b9ffcc5824240a484d1ecd4795bacb2fe88f3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".local_ipaddress."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "local_ipaddress";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6a104730949fbc4c78e4fa98ed769ca0faa02e9818936b61032d2d77526afa9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd96ffd135b2fd7b973ac026d28085defbe8983df057ced3eb4f2130b0831312"; };
    dependencies = {
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fabed175da42fed1fa0746b0ea71f412aa9d35e76e95e59b192c64b9dc2bf8b"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".loom."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "loom";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0e8460f2f2121162705187214720353c517b97bdfb3494c0b1e33d83ebe4bed"; };
    features = builtins.concatLists [
      [ "checkpoint" ]
      [ "default" ]
      [ "serde" ]
      [ "serde_json" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      generator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generator."0.6.23" { inherit profileName; };
      scoped_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "lru-cache";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31e24f1ad8321ca0e8a1e0ac13f23cb668e6f5466c2c57319f6a5cf1cc8e3b1c"; };
    dependencies = {
      linked_hash_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lyon."0.16.2" = overridableMkRustCrate (profileName: rec {
    name = "lyon";
    version = "0.16.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "28d083e12e9e22298eec27751ec4a0975abac5873a3b0dcdbbecc608d333f0e9"; };
    dependencies = {
      lyon_algorithms = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lyon_algorithms."0.16.0" { inherit profileName; };
      lyon_tessellation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lyon_tessellation."0.16.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lyon_algorithms."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "lyon_algorithms";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11033936a5e9d7bf35b7ba71a19f8b6bc838f3206304175dc5b3524ca16672a8"; };
    dependencies = {
      lyon_path = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lyon_path."0.16.2" { inherit profileName; };
      sid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sid."0.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lyon_geom."0.16.2" = overridableMkRustCrate (profileName: rec {
    name = "lyon_geom";
    version = "0.16.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ce4e12203c428a58200b8cf1c0a3aad1cda907008ea11310bb3729593e5f933"; };
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      euclid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lyon_path."0.16.2" = overridableMkRustCrate (profileName: rec {
    name = "lyon_path";
    version = "0.16.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "243c71fff16677ecde2d38794a0253a8f0417cebaacc6390677c30733831d8cb"; };
    dependencies = {
      lyon_geom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lyon_geom."0.16.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lyon_tessellation."0.16.2" = overridableMkRustCrate (profileName: rec {
    name = "lyon_tessellation";
    version = "0.16.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ecf3d769bec66396957d7c5cb91f998c4182e53fdc96cc435b6ebcd46a63cd9"; };
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      lyon_path = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lyon_path."0.16.2" { inherit profileName; };
      sid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sid."0.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mach."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "mach";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "86dd2487cdfea56def77b88438a2c915fb45113c5319bfe7e14306ca4cd0b0e1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "deprecated")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "use_std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "mach";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" = overridableMkRustCrate (profileName: rec {
    name = "malloc_buf";
    version = "0.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".match_cfg."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "match_cfg";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffbee8634e0d45d258acb448e7eaab3fce7a0a467395d4d9f228e3c1f01fb2e4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "matchers";
    version = "0.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1"; };
    dependencies = {
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "matches";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matrixmultiply."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "matrixmultiply";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a8a15b776d9dfaecd44b03c5828c2199cddff5247215858aac14624f8d6b741"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      rawpointer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rawpointer."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".maybe-uninit."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "maybe-uninit";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60302e4db3a61da70c0cb7991976248362f30319e88850c487b9b95bbf059e00"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ee1c47aaa256ecabcaea351eae4a9b01ef39ed810004e298d2511ed284b1525"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b70ca2a6103ac8b665dc150b142ef0e4e89df640c9e6cf295d189c3caebe5a"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".metal."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "metal";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4598d719460ade24c7d91f335daf055bf2a7eec030728ce751814c50cdd6a26c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "private")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "block" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "cocoa_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "foreign_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" = overridableMkRustCrate (profileName: rec {
    name = "mime";
    version = "0.3.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimp3."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "minimp3";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9684a8c55935322fdab159b5d7a6163b33f6e7d32c4a8a54fe53d1bcfad738db"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "minimp3_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimp3-sys."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "slice_deque" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slice-deque."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimp3-sys."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "minimp3-sys";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e21c73734c69dc95696c9ed8926a2b393171d98b3f5f5935686a26a487ab9b90"; };
    buildDependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "791daaae1ed6889560f8c4359194f56648355540573244a5448a83ba1ecc7435"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "adler32" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler32."1.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f2d26ec3309788e423cfbf68ad1800f061638098d76a83681af979dc4eda19d"; };
    dependencies = {
      adler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."0.2.3" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.6.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4afd66f5b91bf2a3bc13fad0e21caedac168ca4c707504e75585648ae80e4cc4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "with-deprecated" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "fuchsia" then "fuchsia_zircon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon."0.3.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "fuchsia" then "fuchsia_zircon_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" { inherit profileName; };
      iovec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" { inherit profileName; };
      ${ if hostPlatform.isWindows then "kernel32" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.2.2" { inherit profileName; };
      net2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio-extras."2.0.6" = overridableMkRustCrate (profileName: rec {
    name = "mio-extras";
    version = "2.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19"; };
    dependencies = {
      lazycell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio-uds."0.6.8" = overridableMkRustCrate (profileName: rec {
    name = "mio-uds";
    version = "0.6.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "afcb699eb26d4332647cc848492bbc15eafb26f08d0304550d5aa1f612e066f0"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "iovec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.isUnix then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miow."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "miow";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ebd808424166322d4a38da87083bfddd3ac4c131334ed55856112eb06d46944d"; };
    dependencies = {
      kernel32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" { inherit profileName; };
      net2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
      ws2_32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ws2_32-sys."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "naga";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05089b2acdf0e6a962cdbf5e328402345a27f59fcde1a59fe97a73e8149d416f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "glsl-out")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "msl-out")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "petgraph")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "spirv")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "spv-in")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "spv-out")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "wgsl-in")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bit_set" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "fxhash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "petgraph" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "spirv" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_headers."1.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "unknown".naia-client-socket."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "naia-client-socket";
    version = "0.6.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/patches/naia-socket/client");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "js-sys")
      [ "multithread" ]
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "serde")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "serde_derive")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "url")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "wasm-bindgen")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "wbindgen")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "web_sys")
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      naia_socket_shared = rustPackages."unknown".naia-socket-shared."0.4.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "serde_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.118" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "url" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "unknown".naia-server-socket."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "naia-server-socket";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/patches/naia-socket/server");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "futures-core")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "js-sys")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "rand")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "serde")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "serde_derive")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "url")
      (lib.optional (rootFeatures' ? "client/native" || rootFeatures' ? "server/native" || rootFeatures' ? "shared/native") "use-udp")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "use-wbindgen")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "wasm-bindgen")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "wasm-bindgen-futures")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "web_sys")
    ];
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.42" { profileName = "__noProfile"; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.8" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "futures_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.8" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      naia_socket_shared = rustPackages."unknown".naia-socket-shared."0.4.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "rand" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "serde_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.118" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "url" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "unknown".naia-socket-shared."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "naia-socket-shared";
    version = "0.4.1";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/patches/naia-socket/shared");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "js-sys")
      [ "multithread" ]
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "wasm-bindgen")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "wbindgen")
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      local_ipaddress = rustPackages."registry+https://github.com/rust-lang/crates.io-index".local_ipaddress."0.1.3" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.27.1" = overridableMkRustCrate (profileName: rec {
    name = "nalgebra";
    version = "0.27.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "462fffe4002f4f2e1f6a9dcf12cc1a6fc0e15989014efc02a941d3e0f5dc2120"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "macros" ]
      [ "matrixmultiply" ]
      [ "nalgebra-macros" ]
      [ "serde" ]
      [ "serde-serialize" ]
      [ "serde-serialize-no-std" ]
      [ "sparse" ]
      [ "std" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.0" { inherit profileName; };
      matrixmultiply = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matrixmultiply."0.3.1" { inherit profileName; };
      nalgebra_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra-macros."0.1.0" { profileName = "__noProfile"; };
      num_complex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.0" { inherit profileName; };
      num_rational = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      simba = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simba."0.5.1" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nalgebra-macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "nalgebra-macros";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "01fcc0b8149b4632adc89ac3b7b31a12fb6099a0317a4eb2ebff574ef7de7218"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nanoid."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "nanoid";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6be8d687c9ec5a00841748752f817ca496787eb68486d23038033278eb151fad"; };
    dependencies = {
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.4.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ncollide2d."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "ncollide2d";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "940ca569aa82b1d1d7f9839ed54ed1afd24e63a154a78f5ca288942509f72289"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "dim2" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.27.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      petgraph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" { inherit profileName; };
      simba = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simba."0.5.1" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
      slotmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5eb167c1febed0a496639034d0c76b3b74263636045db5489eee52143c246e73"; };
    dependencies = {
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ffi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
      num_enum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.4.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk-glue";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bdf399b8b7a39c6fb153c4ec32c72fd5fe789df24a647f229c239aa7adb15241"; };
    features = builtins.concatLists [
      [ "android_logger" ]
      [ "default" ]
      [ "logger" ]
    ];
    dependencies = {
      android_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_logger."0.8.6" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ndk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.2.1" { inherit profileName; };
      ndk_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.2.0" { profileName = "__noProfile"; };
      ndk_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-macro";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05d1c6307dc424d0f65b9b06e94f88248e6305726b14729fd67a5e47b2dc481d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "logger" ]
    ];
    dependencies = {
      darling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.10.2" { inherit profileName; };
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk-sys";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c44922cb3dbb1c70b5e5f443d63b64363a898564d739ba5198e3a9138442868d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" = overridableMkRustCrate (profileName: rec {
    name = "net2";
    version = "0.2.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "391630d12b68002ae1e25e8f974306474966550ad82dac6886fb8910c19568ae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "duration" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" || hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b2e0b4f3320ed72aaedb9a5ac838690a8047c7b275da22711fddff4f8a14229"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "83450fe6a6142ddd95fb064b746083fc4ef1705fe81f64a64e1d4b39f54a1055"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."5.1.2" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "5.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffb4262d26ed83a1c0a33a38fe2bb15797329c85770da05e6b828ddb782627af"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."6.0.1" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "6.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "88034cfd6b4a0d54dd14f4a507eceee36c0b70e5a02236c4e4df571102be17f0"; };
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".notify."5.0.0-pre.4" = overridableMkRustCrate (profileName: rec {
    name = "notify";
    version = "5.0.0-pre.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8b946889dfdad884379cd56367d93b6d0ce8889cc027d26a69a3a31c0a03bb5"; };
    dependencies = {
      anymap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anymap."0.12.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.4.4" { inherit profileName; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.13" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "fsevent" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fsevent."2.0.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "fsevent_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fsevent-sys."3.0.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" then "inotify" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inotify."0.8.3" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" then "mio_extras" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio-extras."2.0.6" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".nphysics2d."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "nphysics2d";
    version = "0.22.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/patches/nphysics/build/nphysics2d");
    features = builtins.concatLists [
      [ "default" ]
      [ "dim2" ]
      [ "stdweb" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      generational_arena = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generational-arena."0.2.8" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.6.1" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.27.1" { inherit profileName; };
      ncollide2d = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ncollide2d."0.30.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      simba = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simba."0.5.1" { inherit profileName; };
      slotmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "num";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b7a8e9be5e039e2ff869df49155f1c06bd01ade2117ec783e56ab0932b67a8f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "num-bigint" ]
      [ "std" ]
    ];
    dependencies = {
      num_bigint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.3.1" { inherit profileName; };
      num_complex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.3.1" { inherit profileName; };
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_iter = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.42" { inherit profileName; };
      num_rational = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.3.2" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "num-bigint";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e9a41747ae4633fce5adffb4d2e81ffc5e89593cb19917f8fb2cc5ff76507bf"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-complex."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "num-complex";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "747d632c0c558b87dbabbe6a82f3b4ae03720d0646ac5b7b4dae89394be5f2c5"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "num-complex";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26873667bbbb7c5182d4a37c1add32cdf09f841af72da53318fdb81543c15085"; };
    features = builtins.concatLists [
      [ "serde" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "num-derive";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "876a53fff98e03a936a674b29568b0e605f06b29372c2489ff4de23f1949743d"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db"; };
    features = builtins.concatLists [
      [ "i128" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.42" = overridableMkRustCrate (profileName: rec {
    name = "num-iter";
    version = "0.1.42";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2021c8337a54d21aca0d59a92577a029af9431cb59b909b03252b9c164fad59"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "i128" ]
      [ "std" ]
    ];
    dependencies = {
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-rational."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "num-rational";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12ac428b1cb17fce6f731001d307d351ec70a6d202fc2e60f7d4c5e42d8f4f07"; };
    features = builtins.concatLists [
      [ "num-bigint" ]
      [ "num-bigint-std" ]
      [ "std" ]
    ];
    dependencies = {
      num_bigint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.3.1" { inherit profileName; };
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "num-rational";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d41702bd167c2df5520b384281bc111a4b5efcf7fbc4c9c222c815b07e0a6a6a"; };
    dependencies = {
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "i128" ]
      [ "libm" ]
      [ "std" ]
    ];
    dependencies = {
      libm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.1" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.0" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3"; };
    dependencies = {
      ${ if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "aarch64") && hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.17" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "num_enum";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca565a7df06f3d4b485494f25ba05da1435950f4dc263440eda7a6fa9b8e36e4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      derivative = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.1.1" { profileName = "__noProfile"; };
      num_enum_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.4.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "num_enum_derive";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffa5a33ddddfee04c0283a7653987d634e880347e96b5b2ed64de07efb59db9d"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "objc";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "objc_exception")
    ];
    dependencies = {
      malloc_buf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "objc_exception" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "objc_exception";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4"; };
    buildDependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      [ "elf" ]
      [ "macho" ]
      [ "pe" ]
      [ "read_core" ]
      [ "unaligned" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oboe."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "oboe";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1aadc2b0867bdbb9a81c4d99b9b682958f49dbea1295a81d2f646cca2afdd9fc"; };
    features = builtins.concatLists [
      [ "java-interface" ]
      [ "jni" ]
      [ "ndk" ]
      [ "ndk-glue" ]
    ];
    dependencies = {
      jni = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.14.0" { inherit profileName; };
      ndk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.2.1" { inherit profileName; };
      ndk_glue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
      num_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" { profileName = "__noProfile"; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      oboe_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe-sys."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oboe-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "oboe-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68ff7a51600eabe34e189eec5c995a62f151d8d97e5fbca39e87ca738bb99b82"; };
    buildDependencies = {
      fetch_unroll = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".fetch_unroll."0.2.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ogg."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ogg";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6951b4e8bf21c8193da321bcce9c9dd2e13c858fe078bf9054a288b419ae5d6e"; };
    dependencies = {
      ${ if rootFeatures' ? "client/default" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "13bd41f508810a131401606d54ac32a467c97172d74ba7662562ebba5ad07fa0"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
      [ "unstable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "owned_ttf_parser";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f923fb806c46266c02ab4a5b239735c144bdeda724a50ed058e5226f594cde3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "owned_ttf_parser";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1035b3031937401c4d01719ec82c558b268f923dcfca86e0fb1c2701782b2e89"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "parking";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "427c3892f9e783d91cc128285287e70a59e206ca452770ece88a76f7a3eddd72"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d7744ac029df22dca6284efe4e898991d28e3085c706c972bcd7da4a27a15eb"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.2" { inherit profileName; };
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d7c6d9b8427445284a09c55be860a15855ab580a417ccad9da88f5a06787ced0"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.1.57" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".paste."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "paste";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c5d65c4d95931acda4498f675e332fcbdc9a06705cd07086c510e9b6009cd1c1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "peeking_take_while";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "petgraph";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "467d164a6de56270bd7c4d070df81d07beace25012d5103ced4e9ff08d6afdb7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "graphmap" ]
      [ "matrix_graph" ]
      [ "stable_graph" ]
    ];
    dependencies = {
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.2.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project."0.4.28" = overridableMkRustCrate (profileName: rec {
    name = "pin-project";
    version = "0.4.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "918192b5c59119d51e0cd221f4d49dde9112824ba717369e903c97d076083d0f"; };
    dependencies = {
      pin_project_internal = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."0.4.28" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "pin-project";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ccc2237c2c489783abd8c4c80e5450fc0e98644555b1364da68cc29aa151ca7"; };
    dependencies = {
      pin_project_internal = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.0.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."0.4.28" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-internal";
    version = "0.4.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3be26700300be6d9d23264c73211d8190e755b6b5ca7a1b28230025511b52a5e"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-internal";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8e8d2bf0b23038a4424865103a4df472855692821aab4e4f5c3312d461d9e5f"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c917123afa01924fc84bb20c4c03f004d9c38e5127e3c039bbf7f4b9c76a2f6b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6b063f57ec186e6140e2b8b6921e5f1bd89c7356dda5b33acc5401203ca6131c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3831453b3449ceb48b6d9c7ad7c96d5ea673e9b470a1dc578c2ce6521230884c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".png."0.16.8" = overridableMkRustCrate (profileName: rec {
    name = "png";
    version = "0.16.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c3287920cb847dee3de33d301c463fba14dda99db24214ddf93f83d3021f4c6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "deflate")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "png-encoding")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "crc32fast" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "deflate" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".deflate."0.8.6" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" then "miniz_oxide" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.3.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785"; };
    dependencies = {
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-hack";
    version = "0.5.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-nested."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-nested";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eba180dafb9038b050a4c280019bbedf9f2467b61e5d892dcad585bb57aadc5a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e0704ee1a7e00d7bb417d0770ea303c1bccbabf0ef1667dae92b5967f5f8a71"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".publicsuffix."1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "publicsuffix";
    version = "1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3bbaa49075179162b49acac1c6aa45fb4dafb5f13cf6794276d77bc7fd95757b"; };
    dependencies = {
      error_chain = rustPackages."registry+https://github.com/rust-lang/crates.io-index".error-chain."0.12.4" { inherit profileName; };
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".qstring."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "qstring";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d464fae65fff2680baf48019211ce37aaec0c78e9264c84a3e484717f965104e"; };
    dependencies = {
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" = overridableMkRustCrate (profileName: rec {
    name = "quick-error";
    version = "1.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "552840b97013b1a26992c11eac34bdd778e464601a4c2054b5f0bff7c6761293"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "libc" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "fuchsia" then "fuchsia_cprng" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-cprng."0.1.1" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.abi.name == "sgx" then "rand_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.3.1" { inherit profileName; };
      ${ if hostPlatform.parsed.abi.name == "sgx" then "rdrand" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rdrand."0.4.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "getrandom_package" ]
      [ "libc" ]
      [ "std" ]
      [ "stdweb" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      getrandom_package = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.15" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten") then "rand_chacha" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "rand_hc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "rand_hc" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten") then "rand_chacha" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.0" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "rand_hc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.10" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.10" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.4.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8b34ba8cfb21243bd8df91854c830ff0d785fff2e82ebd4434c2644cb9ada18"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_hc";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_hc";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "range-alloc";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a871f1e45a3a3f0c73fb60343c811238bb5143a81642e27c2ac7aac27ff01a63"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0a441a7a6c80ad6473bd4b74ec1c9a4c951794285bf941c2126f607c72e48211"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rawpointer."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "rawpointer";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60a357793950651c4ed0f3f52338f53b2f809f32d83a07f72909fa13e4c6c1e3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rdrand."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rdrand";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rectangle-pack."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rectangle-pack";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e509b8eba9ca1884760ad1e2161cece724d4fd2b4cb47ddc01706920c6500cd7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rectangle-pack."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "rectangle-pack";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "831eb2fcb5b72b09c72a3f2d24c09a28d79886512827cd4674d9bac10557f16a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.1.57" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.1.57";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38cf2c13ed4745de91a5eb834e11c00bcc3709e773173b2ce4c56c9fbde04b9c"; };
    features = builtins.concatLists [
      [ "aho-corasick" ]
      [ "default" ]
      [ "memchr" ]
      [ "perf" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "std" ]
      [ "thread_local" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
    dependencies = {
      aho_corasick = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.15" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.21" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae1ded71d66a4a97f5e961fd0cb25a5f366a42a41570d16a763a69c092c26ae4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "regex-syntax" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.21" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.6.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b181ba2dcf07aaccad5448e8ead58db5b742cf85dfe035e2227f137a539a189"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".resolv-conf."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "resolv-conf";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52e44394d2086d010551b14b53b1f24e31647570cd1deb0379e2c21b329aba00"; };
    features = builtins.concatLists [
      [ "hostname" ]
      [ "system" ]
    ];
    dependencies = {
      hostname = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hostname."0.3.1" { inherit profileName; };
      quick_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ring."0.16.19" = overridableMkRustCrate (profileName: rec {
    name = "ring";
    version = "0.16.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "024a1e66fea74c66c66624ee5622a7ff0e4b73a13b4f5c326ddb50c708944226"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "dev_urandom_fallback" ]
      [ "once_cell" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "solaris" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" || (hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "linux") then "spin" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.5.2" { inherit profileName; };
      untrusted = rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.vendor.name == "unknown" && hostPlatform.parsed.kernel.name == "unknown" && hostPlatform.parsed.abi.name == "" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ringbuf."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "ringbuf";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "908f26a8bb4110da2b151015792f3b8f434e2c76379fca8ab410f12ef534b404"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cache_padded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cache-padded."1.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rle-decode-fast."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "rle-decode-fast";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rodio."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "rodio";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c9683532495146e98878d4948fa1a1953f584cd923f2a5f5c26b7a8701b56943"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "minimp3")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "mp3")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "cpal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpal."0.13.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "minimp3" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimp3."0.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ron."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "ron";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10b27f2d1934e1c43458a35bfaaf1aa7550dbb364a53b963c6894c9121bfd6d5"; };
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.12.3" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.18" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e3bad0ee36814ca07d7968269dd4b7ec89ec2da10c4bb613928d3077083c232"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"; };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "rustls";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "064fd21ff87c6e87ed4506e68beb42459caa4a0e2eb144932e6776768556980b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
      [ "logging" ]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.19" { inherit profileName; };
      sct = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sct."0.6.0" { inherit profileName; };
      webpki = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rusttype."0.9.2" = overridableMkRustCrate (profileName: rec {
    name = "rusttype";
    version = "0.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc7c727aded0be18c5b80c1640eae0ac8e396abf6fa8477d96cb37d18ee5ec59"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "has-atomics" ]
      [ "std" ]
    ];
    dependencies = {
      ab_glyph_rasterizer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.4" { inherit profileName; };
      owned_ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rusty-xinput."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rusty-xinput";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2aa654bc32eb9ca14cce1a084abc9dfe43949a4547c35269a094c39272db3bb"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scoped-tls";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped_threadpool."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "scoped_threadpool";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sct."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "sct";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3042af939fca8c3453b7af0f1c66e533a15a86169e39de2657310ade8f98d3c"; };
    dependencies = {
      ring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.19" { inherit profileName; };
      untrusted = rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "semver-parser";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".send_wrapper."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "send_wrapper";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f638d531eccd6e23b980caf34876660d38e265409d8e99b397ab71eb3612fad0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.118";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06c64263859d87aa2eb554587e2d23183398d617427327cf2b3d0ed8c69e4800"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.118" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.118" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.118";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c84d3526699cd55261af4b941e4e725444df67aa4f9e6a3564f18030d12672df"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.60";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1500e84d27fe482ed1dc791a56eddc2f230046a040fa908c08bda1d9fb615779"; };
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default") "raw_value")
      [ "std" ]
    ];
    dependencies = {
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.6" { inherit profileName; };
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "serde_urlencoded";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "edfa57a7f8d9c1d260a549e7224100f6c43d43f9103e06dd8b4095a9b2b43ce9"; };
    dependencies = {
      form_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.0" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.6" { inherit profileName; };
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "unknown".server."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "server";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/server");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "server/default") "default")
      (lib.optional (rootFeatures' ? "server/native") "native")
      (lib.optional (rootFeatures' ? "server/web") "web")
      (lib.optional (rootFeatures' ? "server/default" || rootFeatures' ? "server/winit") "winit")
    ];
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
      bevy_prototype_transform_tracker = rustPackages."unknown".bevy_prototype_transform_tracker."0.1.0" { inherit profileName; };
      crystalorb_bevy_networking_turbulence = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crystalorb-bevy-networking-turbulence."0.2.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      shared = rustPackages."unknown".shared."0.1.0" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      wasm_bindgen_console_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-console-logger."0.1.1" { inherit profileName; };
      web_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if rootFeatures' ? "server/default" || rootFeatures' ? "server/winit" then "winit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.24.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "sha-1";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfebf75d25bd900fd1e7d11501efab59bc846dbc76196839663e6637bba9f25f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then "cpuid_bool" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpuid-bool."0.1.2" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "sha1";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2579985fda508104f7587689507983eadd6a6e84dd35d6d115361f530916fa0d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shaderc."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "shaderc";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03f0cb8d1f8667fc9c50d5054be830a117af5f9a15f87c66b72bbca0c2fca484"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      shaderc_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shaderc-sys."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shaderc-sys."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "shaderc-sys";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c89175f80244b82f882033a81bd188f87307c4c39b2fe8d0f194314f270bdea9"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
    buildDependencies = {
      cmake = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.45" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "sharded-slab";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b4921be914e16899a80adefb821f8ddb7974e3f1250223575a44ed994882127"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if false then "loom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".loom."0.3.6" { inherit profileName; };
    };
  });
  
  "unknown".shared."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "shared";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/shared");
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "client/native" || rootFeatures' ? "server/native" || rootFeatures' ? "shared/native") "native")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "web")
    ];
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.5.0" { inherit profileName; };
      bevy_prototype_transform_tracker = rustPackages."unknown".bevy_prototype_transform_tracker."0.1.0" { inherit profileName; };
      crystalorb_bevy_networking_turbulence = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crystalorb-bevy-networking-turbulence."0.2.1" { inherit profileName; };
      lyon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lyon."0.16.2" { inherit profileName; };
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.27.1" { inherit profileName; };
      nphysics2d = rustPackages."unknown".nphysics2d."0.22.0" { inherit profileName; };
      num = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num."0.3.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      splines = rustPackages."unknown".splines."4.0.0" { inherit profileName; };
      web_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shlex."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "shlex";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sid."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "sid";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd5ac56c121948b4879bba9e519852c211bcdd8f014efff766441deff0b91bdb"; };
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook-registry";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "16f1d0fef1604ba8f7a073c7e701f213e056707210e9020af4528e0101ce11a6"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "unknown".signalling-server."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "signalling-server";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/signalling-server");
    dependencies = {
      actix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix."0.10.0" { inherit profileName; };
      actix_cors = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-cors."0.5.4" { inherit profileName; };
      actix_web = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web."3.3.2" { inherit profileName; };
      actix_web_actors = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web-actors."3.0.0" { inherit profileName; };
      nanoid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nanoid."0.1.3" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simba."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "simba";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e82063457853d00243beda9952e910b82593e4b07ae9f721b9278a99a0d3d5c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.0" { inherit profileName; };
      num_complex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slice-deque."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "slice-deque";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31ef6ee280cdefba6d2d0b4b78a84a1c1a3f3a4cec98c2d4231c8bc225de0f25"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "use_std")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "dragonfly") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && (hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") && hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slotmap."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "slotmap";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c46a3482db8f247956e464d783693ece164ca056e6e67563ee5505bdb86452cd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "slotmap";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "585cd5dffe4e9e06f6dfdf66708b70aca3f781bed561f4f667b2d9c0d4559e36"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae524f056d7d770e174287294f562e95044c68e88dec909a00d2094805db9d75"; };
    features = builtins.concatLists [
      [ "serde" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "smithay-client-toolkit";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "86d1d080d3dc98d68251d073b231dfaa200fdc2ddebc435b313ad937d0ae9dfd"; };
    features = builtins.concatLists [
      [ "andrew" ]
      [ "calloop" ]
      [ "default" ]
      [ "frames" ]
    ];
    dependencies = {
      andrew = rustPackages."registry+https://github.com/rust-lang/crates.io-index".andrew."0.3.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      calloop = rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop."0.6.5" { inherit profileName; };
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.4.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.1.0" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.2" { inherit profileName; };
      wayland_cursor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.28.2" { inherit profileName; };
      wayland_protocols = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.28.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snap."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "snap";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc725476a1398f0480d56cd0ad381f6f32acf2642704456f8f59a35df464b59a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "122e570113d28d773067fab24266b66753f6ea915758651696b6e35e49f88d6e"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spin."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "spin";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv-reflect."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "spirv-reflect";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cecc7af6a7d3ca6d15f4d6b5077df89c77ad1f4b314d0cabee221656d041dad7"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.118" { profileName = "__noProfile"; };
      spirv_headers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_headers."1.5.0" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv-std."0.4.0-alpha.8" = overridableMkRustCrate (profileName: rec {
    name = "spirv-std";
    version = "0.4.0-alpha.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e2676f3e58345b7c742b266b5bec022445b43e6471b9a00895faec03a52723e"; };
    features = builtins.concatLists [
      [ "const-generics" ]
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      spirv_std_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-std-macros."0.4.0-alpha.8" { profileName = "__noProfile"; };
      spirv_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-types."0.4.0-alpha.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv-std-macros."0.4.0-alpha.8" = overridableMkRustCrate (profileName: rec {
    name = "spirv-std-macros";
    version = "0.4.0-alpha.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "63a4cdbf70b55dfd68490edac0786ae8324710d4fdeb3697936b56da6438af06"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.2" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      spirv_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-types."0.4.0-alpha.8" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv-types."0.4.0-alpha.8" = overridableMkRustCrate (profileName: rec {
    name = "spirv-types";
    version = "0.4.0-alpha.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cffd04779995c5d51af572e1ee6337eb59e253a2825de8775d81be798eeb79d3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" = overridableMkRustCrate (profileName: rec {
    name = "spirv_cross";
    version = "0.23.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60647fadbf83c4a72f0d7ea67a7ca3a81835cf442b8deae5c134c3e0055b2e14"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "glsl")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "hlsl")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "msl")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.config == "wasm32-unknown-unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.config == "wasm32-unknown-unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
    buildDependencies = {
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && !(hostPlatform.parsed.cpu.name == "wasm32") then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.66" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv_headers."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "spirv_headers";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f5b132530b1ac069df335577e3581765995cba5a13995cdbbdbc8fb057c532c"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "unknown".splines."4.0.0" = overridableMkRustCrate (profileName: rec {
    name = "splines";
    version = "4.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/patches/splines");
    features = builtins.concatLists [
      [ "default" ]
      [ "impl-nalgebra" ]
      [ "nalgebra" ]
      [ "std" ]
    ];
    dependencies = {
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.27.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".standback."0.2.13" = overridableMkRustCrate (profileName: rec {
    name = "standback";
    version = "0.2.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf906c8b8fc3f6ecd1046e01da1d8ddec83e48c8b08b84dcc02b585a6bedf5a8"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "stdweb";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef5430c8e36b713e13b48a9f709cc21e046723fe44ce34587b73a830203b533e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" = overridableMkRustCrate (profileName: rec {
    name = "stdweb";
    version = "0.4.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d022496b16281348b52d0e30ae99e01a73d737b2f45d38fed4edf79f9325a1d5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "serde_json" ]
    ];
    dependencies = {
      discard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".discard."1.0.4" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
      stdweb_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-derive."0.5.3" { profileName = "__noProfile"; };
      stdweb_internal_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-macros."0.2.9" { profileName = "__noProfile"; };
      stdweb_internal_runtime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-runtime."0.1.5" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.vendor.name == "unknown" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-derive."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-derive";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c87a60a40fccc84bef0652345bbbbbe20a605bf5d0ce81719fc476f5c03b50ef"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.118" { profileName = "__noProfile"; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-macros."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-internal-macros";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58fa5ff6ad0d98d1ffa8cb115892b6e69d67799f6763e162a1c9db421dc22e11"; };
    dependencies = {
      base_x = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.8" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.118" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.6.0" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-runtime."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-internal-runtime";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "213701ba3370744dcd1a12960caa4843b3d68b4d1c0a5d575e0d65b2ee9d16c0"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".storage-map."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "storage-map";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "418bb14643aa55a7841d5303f72cf512cfb323b8cc221d51580500a1ca75206c"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "lock_api" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stretch."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "stretch";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b0dc6d20ce137f302edf90f9cd3d278866fd7fb139efca6f246161222ad6d87"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.1.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6446ced80d6c486436db5c078dde11a9f73d42b57fb273121e160b84f63d894c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".svg_fmt."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "svg_fmt";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fb1df15f412ee2e9dfc1c504260fa695c1c3f10fe9f4a6ee2d2184d7d6450e2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.65";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3a1d708c221c5a612956ef9f75b37e454e88d1f7b899fbd3a18d4252012d663"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".take_mut."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "take_mut";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tar."0.4.30" = overridableMkRustCrate (profileName: rec {
    name = "tar";
    version = "0.4.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "489997b7557e9a43e192c527face4feacc78bfbe6eed67fd55c4c9e381cba290"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "xattr" ]
    ];
    dependencies = {
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.13" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.1.57" { inherit profileName; };
      ${ if hostPlatform.isUnix then "xattr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xattr."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e0f4a65597094d4483ddaed134f409b2cb7c1beccf25201a9f73c719254fa98e"; };
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.24" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.24" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7765189610d8241a44529806d6fd1f2e0a08734313a35d5b3a556f92b381f3c0"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "threadpool";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa"; };
    dependencies = {
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thunderdome."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "thunderdome";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7572415bd688d401c52f6e36f4c8e805b9ae1622619303b9fa835d531db0acae"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time."0.1.44" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.1.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6db9e6914ab8b1ae1c260a4ae7a49b6c5611b40328a735b21862567685e73255"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.0+wasi-snapshot-preview1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time."0.2.23" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.2.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bcdaeea317915d59b2b4cd3b5efcd156c309108664277793f5351700c02ce98b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "deprecated" ]
      [ "libc" ]
      [ "std" ]
      [ "stdweb" ]
      [ "winapi" ]
    ];
    dependencies = {
      const_fn = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".const_fn."0.4.4" { profileName = "__noProfile"; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      standback = rustPackages."registry+https://github.com/rust-lang/crates.io-index".standback."0.2.13" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" { inherit profileName; };
      time_macros = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros."0.1.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "time-macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "957e9c6e26f12cb6d0dd7fc776bb67a706312e7299aed74c8dd5b17ebb27e2f1"; };
    dependencies = {
      proc_macro_hack = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" { profileName = "__noProfile"; };
      time_macros_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros-impl."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-macros-impl."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "time-macros-impl";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5c3be1edfad6027c69f5491cf4cb310d1a71ecd6af742788c6ff8bced86b8fa"; };
    dependencies = {
      proc_macro_hack = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-hack."0.5.19" { profileName = "__noProfile"; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      standback = rustPackages."registry+https://github.com/rust-lang/crates.io-index".standback."0.2.13" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ccf8dbc19eb42fba10e8feaaec282fb50e2c14b2726d6301dbfeed0f73306a6f"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "tinyvec_macros" ]
    ];
    dependencies = {
      tinyvec_macros = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio."0.2.25" = overridableMkRustCrate (profileName: rec {
    name = "tokio";
    version = "0.2.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6703a273949a90131b290be1fe7b039d0fc884aa1935860dfcbe056f28cd8092"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "fnv" ]
      [ "futures-core" ]
      [ "io-driver" ]
      [ "io-util" ]
      [ "iovec" ]
      [ "lazy_static" ]
      [ "libc" ]
      [ "memchr" ]
      [ "mio" ]
      [ "mio-uds" ]
      [ "rt-core" ]
      [ "rt-util" ]
      [ "signal" ]
      [ "signal-hook-registry" ]
      [ "slab" ]
      [ "stream" ]
      [ "sync" ]
      [ "tcp" ]
      [ "time" ]
      [ "udp" ]
      [ "uds" ]
      [ "winapi" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      iovec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.3.4" { inherit profileName; };
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      ${ if hostPlatform.isUnix then "mio_uds" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio-uds."0.6.8" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.11" { inherit profileName; };
      ${ if hostPlatform.isUnix then "signal_hook_registry" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.3.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "134af885d758d645f0f0505c9a8b3f9bf8a348fd822e112ab5248138348f1722"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "sync" ]
    ];
    dependencies = {
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.0" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "tokio-util";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be8242891f2b6cbef26a2d7e8605133c2c554cd35b3e4948ea892d6d68436499"; };
    features = builtins.concatLists [
      [ "codec" ]
      [ "compat" ]
      [ "default" ]
      [ "full" ]
      [ "futures-io" ]
      [ "udp" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.8" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.8" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.8" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.11" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."0.2.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75cf45bb0bef80604d001caaec0d09da99611b3c0fd39d3080468875cdb65645"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f47026cdc4080c07e49b37087de021820269d996f581aac150ef9e5583eefe3"; };
    features = builtins.concatLists [
      [ "attributes" ]
      [ "default" ]
      [ "log" ]
      [ "release_max_level_info" ]
      [ "std" ]
      [ "tracing-attributes" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.0" { inherit profileName; };
      tracing_attributes = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.11" { profileName = "__noProfile"; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.17" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80e0ccfc3378da0cce270c946b676a376943f5cd16aeba64568e7939806f4ada"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.17" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f50de3927f93d202783f4513cda820ab47ef17f624b03c096e86ef00c67e6b5f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-futures."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "tracing-futures";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2"; };
    features = builtins.concatLists [
      [ "pin-project" ]
      [ "std-future" ]
    ];
    dependencies = {
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.2" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "tracing-log";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e0f8c7178e13481ff6765bd169b33e8d554c5d2bbede5e32c356194be02b9b9"; };
    features = builtins.concatLists [
      [ "log-tracer" ]
      [ "std" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.17" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "tracing-serde";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb65ea441fbb84f9f6748fd496cf7f63ec9af5bca94dd86456978d055e8eb28b"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.17" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "tracing-subscriber";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1fa8f0c8f4c594e4fc9debc1990deab13238077271ba84dd853d54902ee3401"; };
    features = builtins.concatLists [
      [ "ansi" ]
      [ "ansi_term" ]
      [ "chrono" ]
      [ "default" ]
      [ "env-filter" ]
      [ "fmt" ]
      [ "json" ]
      [ "lazy_static" ]
      [ "matchers" ]
      [ "regex" ]
      [ "registry" ]
      [ "serde" ]
      [ "serde_json" ]
      [ "sharded-slab" ]
      [ "smallvec" ]
      [ "thread_local" ]
      [ "tracing" ]
      [ "tracing-log" ]
      [ "tracing-serde" ]
    ];
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      matchers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.4.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
      sharded_slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.0.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.17" { inherit profileName; };
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.1" { inherit profileName; };
      tracing_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-wasm."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tracing-wasm";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd96394d3d2f119de6c1078fa065b99217db4377f9aac6e87f8393276a0d7962"; };
    dependencies = {
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.15" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-wasm."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "tracing-wasm";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ae741706df70547fca8715f74a8569677666e7be3454313af70f6e158034485"; };
    dependencies = {
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.15" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.19.7" = overridableMkRustCrate (profileName: rec {
    name = "trust-dns-proto";
    version = "0.19.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1cad71a0c0d68ab9941d2fb6e82f8fb2e86d9945b94e1661dd0aaea2b88215a9"; };
    features = builtins.concatLists [
      [ "tokio" ]
      [ "tokio-runtime" ]
    ];
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.42" { profileName = "__noProfile"; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      enum_as_inner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-as-inner."0.3.3" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.8" { inherit profileName; };
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."0.2.25" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.19.7" = overridableMkRustCrate (profileName: rec {
    name = "trust-dns-resolver";
    version = "0.19.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "710f593b371175db53a26d0b38ed2978fafb9e9e8d3868b1acd753ea18df0ceb"; };
    features = builtins.concatLists [
      [ "ipconfig" ]
      [ "resolv-conf" ]
      [ "system-config" ]
      [ "tokio" ]
      [ "tokio-runtime" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.8" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ipconfig" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipconfig."0.2.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      lru_cache = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; };
      resolv_conf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".resolv-conf."0.7.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."0.2.25" { inherit profileName; };
      trust_dns_proto = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.19.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "ttf-parser";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e5d7cd7ab3e47dda6e56542f4bbf3824c15234958c6e1bd6aaa347e93499fdc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "ttf-parser";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62ddb402ac6c2af6f7a2844243887631c4e94b51585b229fcfddb43958cd55ca"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".turbulence."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "turbulence";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2140dc12e5b8b6a747ee3bd42e58dc0e506dddb64b269f3d9a40cca057bdba09"; };
    dependencies = {
      bincode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.2" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.8" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      snap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snap."1.0.4" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "373c8a200f9e67a0c95e62a4f52fbf80c23b4381c05a17845531982fa99e6b33"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a13e63ab62dbe32aeee58d1c5408d35c36c392bba5d9d3142287219721afe606"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      tinyvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.7.1" = overridableMkRustCrate (profileName: rec {
    name = "unicode-segmentation";
    version = "1.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb0d2e7be6ae3a5fa87eed5fb451aff96f2573d2694942e40543ae0bbe19c796"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unreachable."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "unreachable";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56"; };
    dependencies = {
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "untrusted";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ureq."1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "ureq";
    version = "1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "294b85ef5dbc3670a72e82a89971608a1fcc4ed5c7c5a2895230d31a95f0569b"; };
    features = builtins.concatLists [
      [ "cookie" ]
      [ "cookie_store" ]
      [ "cookies" ]
      [ "default" ]
      [ "rustls" ]
      [ "tls" ]
      [ "webpki" ]
      [ "webpki-roots" ]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      chunked_transfer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chunked_transfer."1.3.0" { inherit profileName; };
      cookie = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cookie."0.14.3" { inherit profileName; };
      cookie_store = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cookie_store."0.12.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
      qstring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".qstring."0.7.2" { inherit profileName; };
      rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.0" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.0" { inherit profileName; };
      webpki = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; };
      webpki_roots = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.21.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5909f2b0817350449ed73e8bcd81c8c3c8d9a7a5d8acba4b27db277f1868976e"; };
    dependencies = {
      form_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.0" { inherit profileName; };
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.0" { inherit profileName; };
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "uuid";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9fde2f6a4bea1d6e007c4ad38c6839fa71cbb63b6dbf5b595aa38dc9b1093c11"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "rand" ]
      [ "serde" ]
      [ "std" ]
      [ "stdweb" ]
      [ "v4" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vec-arena."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "vec-arena";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eafc1b9b2dfc6f5529177b62cf806484db55b32dc7c9658a118e11bbeb33061d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "vec_map";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.2" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5a972e5669d67ba988ce3dc826706fb0a8b01471c088cb0b6110b805cc36aed"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "void";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "waker-fn";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d5b2c62b4012a3e1eca5a7e077d13b3bf498c4073e33ccd58626607748ceeca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d"; };
    dependencies = {
      same_file = rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.9.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.10.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a143597ca7c7793eff794def352d41792a93c481eb1042423ff7ff72ba2c31f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3cd364751395ca0f68cafb17666eee36b63077fb5ecd972bbcd74c90c4bf736e"; };
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "serde")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "serde-serialize")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "serde_json")
      [ "spans" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.118" { inherit profileName; };
      ${ if rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web" then "serde_json" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.60" { inherit profileName; };
      wasm_bindgen_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.69" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1114f89ab1f4106e5b55e688b828c0ab0ea593a1ea7c094b141b14cbaaec2d62"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.4.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-console-logger."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-console-logger";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7530a275e7faf7b5b83aabdf78244fb8d9a68a2ec4b26935a05ecc0c9b0185ed"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fe9756085a84584ee9457a002b7cdfe0bfff169f45d2591d8be1345a6780e35"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a6ac8995ead1f084a8dea1e65f194d0973800c7f571f6edd70adf06ecf77084"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      wasm_bindgen_macro_support = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5a48c72f299d80557c7c62e37e7225369ecc0c963964059509fbafe917c7549"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      wasm_bindgen_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.69" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e7811dd7f9398f14cc76efd356f98f03aa30419dea46aa810d71e819fc97158"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.2" = overridableMkRustCrate (profileName: rec {
    name = "wayland-client";
    version = "0.28.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "222b227f47871e47d657c1c5e5360b4af9a877aa9c892716787be1c192c78c42"; };
    features = builtins.concatLists [
      [ "dlopen" ]
      [ "scoped-tls" ]
      [ "use_system_lib" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
      scoped_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" { inherit profileName; };
      wayland_commons = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.2" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.2" { inherit profileName; };
    };
    buildDependencies = {
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.2" = overridableMkRustCrate (profileName: rec {
    name = "wayland-commons";
    version = "0.28.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "230b3ffeda101f877ff8ecb8573f5d26e7beb345b197807c4df34ec06879a3e6"; };
    dependencies = {
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.5.2" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.28.2" = overridableMkRustCrate (profileName: rec {
    name = "wayland-cursor";
    version = "0.28.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0aad1b4301cdccfb5f64056a4736e8155a5f4734bac41fdbca80b1fdbe1ab3e1"; };
    dependencies = {
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.2" { inherit profileName; };
      xcursor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.28.2" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols";
    version = "0.28.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc16a9db803cae58b45f9a84a6cf364434cc49a95c8b1ef98ffeb467d228bdc9"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "unstable_protocols" ]
      [ "wayland-client" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.2" { inherit profileName; };
      wayland_commons = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.2" { inherit profileName; };
    };
    buildDependencies = {
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.2" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.28.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5ee5bd43a1d746efc486515fec561e47205f328b74802b959f10f5500f7e56cc"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.24" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.2" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.28.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0814adbecc7ea97869971e1d1c1b657e31863dda6fd768f119ad3dc408a01e58"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "dlib" ]
      [ "dlopen" ]
      [ "lazy_static" ]
    ];
    dependencies = {
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.4.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.19" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.46";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "222b1ef9334f92a21d3fb53dc3fd80f30836959a90f9274a626d7e06315ba3c3"; };
    features = builtins.concatLists [
      [ "AddEventListenerOptions" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "AngleInstancedArrays")
      [ "AudioBuffer" ]
      [ "AudioBufferSourceNode" ]
      [ "AudioContext" ]
      [ "AudioContextOptions" ]
      [ "AudioContextState" ]
      [ "AudioDestinationNode" ]
      [ "AudioNode" ]
      [ "AudioScheduledSourceNode" ]
      [ "BaseAudioContext" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "BeforeUnloadEvent")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "Blob")
      [ "Crypto" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "CssStyleDeclaration")
      [ "Document" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "DomRect")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "DomRectReadOnly")
      (lib.optional (rootFeatures' ? "client/web") "DomTokenList")
      [ "Element" ]
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "ErrorEvent")
      [ "Event" ]
      [ "EventTarget" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ExtBlendMinmax")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ExtColorBufferFloat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ExtColorBufferHalfFloat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ExtDisjointTimerQuery")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ExtFragDepth")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ExtSRgb")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ExtShaderTextureLod")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ExtTextureFilterAnisotropic")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "FocusEvent")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "Gpu")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuAdapter")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuAddressMode")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBindGroup")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBindGroupDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBindGroupEntry")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBindGroupLayout")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBindGroupLayoutDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBindGroupLayoutEntry")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBindingType")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBlendDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBlendFactor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBlendOperation")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBuffer")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBufferBinding")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBufferCopyView")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuBufferDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuCanvasContext")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuColorDict")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuColorStateDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuCommandBuffer")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuCommandBufferDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuCommandEncoder")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuCommandEncoderDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuCompareFunction")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuComputePassDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuComputePassEncoder")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuComputePipeline")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuComputePipelineDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuCullMode")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuDepthStencilStateDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuDevice")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuDeviceDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuExtent3dDict")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuFilterMode")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuFrontFace")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuIndexFormat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuInputStepMode")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuLimits")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuLoadOp")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuMapMode")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuOrigin3dDict")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuPipelineLayout")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuPipelineLayoutDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuPowerPreference")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuPrimitiveTopology")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuProgrammableStageDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuQueue")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRasterizationStateDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderBundle")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderBundleDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderBundleEncoder")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderBundleEncoderDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderPassColorAttachmentDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderPassDepthStencilAttachmentDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderPassDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderPassEncoder")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderPipeline")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRenderPipelineDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuRequestAdapterOptions")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuSampler")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuSamplerDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuShaderModule")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuShaderModuleDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuStencilOperation")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuStencilStateFaceDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuStoreOp")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuSwapChain")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuSwapChainDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTexture")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureAspect")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureComponentType")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureCopyView")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureDataLayout")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureDimension")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureFormat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureView")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureViewDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuTextureViewDimension")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuVertexAttributeDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuVertexBufferLayoutDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuVertexFormat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "GpuVertexStateDescriptor")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "HtmlCanvasElement")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native" || rootFeatures' ? "server/web") "HtmlElement")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "HtmlImageElement")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "ImageBitmap")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "KeyboardEvent")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web") "Location")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "MediaQueryList")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "MediaQueryListEvent")
      [ "MessageEvent" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "MouseEvent")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "Navigator")
      [ "Node" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "NodeList")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "OesElementIndexUint")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "OesStandardDerivatives")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "OesTextureFloat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "OesTextureFloatLinear")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "OesTextureHalfFloat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "OesTextureHalfFloatLinear")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "OesVertexArrayObject")
      [ "Performance" ]
      [ "PerformanceTiming" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "PointerEvent")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "ProgressEvent")
      [ "Request" ]
      [ "Response" ]
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcConfiguration")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcDataChannel")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcDataChannelInit")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcDataChannelType")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcIceCandidate")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcIceCandidateInit")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcIceConnectionState")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcPeerConnection")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcPeerConnectionIceEvent")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcSdpType")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcSessionDescription")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "RtcSessionDescriptionInit")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "UiEvent")
      (lib.optional (rootFeatures' ? "server/web") "Url")
      (lib.optional (rootFeatures' ? "client/web") "UrlSearchParams")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGl2RenderingContext")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlActiveInfo")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlBuffer")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlFramebuffer")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlProgram")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebGlQuery")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebGlRenderbuffer")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlRenderingContext")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebGlSampler")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlShader")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlSync")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlTexture")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebGlTransformFeedback")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlUniformLocation")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/native") "WebGlVertexArrayObject")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "WebSocket")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglColorBufferFloat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglCompressedTextureAstc")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglCompressedTextureEtc")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglCompressedTextureEtc1")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglCompressedTexturePvrtc")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglCompressedTextureS3tc")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglCompressedTextureS3tcSrgb")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglDebugRendererInfo")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglDebugShaders")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglDepthTexture")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglDrawBuffers")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "WebglLoseContext")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "WheelEvent")
      [ "Window" ]
      [ "Worker" ]
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "WorkerGlobalScope")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "XmlHttpRequest")
      (lib.optional (rootFeatures' ? "client/web" || rootFeatures' ? "server/web" || rootFeatures' ? "shared/web") "XmlHttpRequestEventTarget")
      [ "console" ]
    ];
    dependencies = {
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" = overridableMkRustCrate (profileName: rec {
    name = "webpki";
    version = "0.21.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8e38c0608262c46d4a56202ebabdeb094cef7e560ca7a226c6bf055188aa4ea"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "trust_anchor_util" ]
    ];
    dependencies = {
      ring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.19" { inherit profileName; };
      untrusted = rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "webpki-roots";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "82015b7e0b8bad8185994674a13a93306bea76cf5a16c5a181382fd3a5ec2376"; };
    dependencies = {
      webpki = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79a0a0a63fac9492cfaf6e7e4bdf9729c128f1e94124b9e4cbc4004b8cb6d1d8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "naga" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "tracing" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && !(hostPlatform.parsed.cpu.name == "wasm32") then "wgc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.7.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "wgt" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-core";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c89fa2cc5d72236461ac09c5be967012663e29cb62f1a972654cbf35e49dffa8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "default")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "raw-window-handle")
    ];
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "copyless" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "fxhash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isWindows then "gfx_backend_dx11" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-dx11."0.7.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isWindows then "gfx_backend_dx12" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-dx12."0.7.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "gfx_backend_empty" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-empty."0.7.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && (!(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.kernel.name == "darwin") || hostPlatform.parsed.cpu.name == "wasm32") then "gfx_backend_gl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-gl."0.7.1" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && !(hostPlatform.parsed.cpu.name == "wasm32") && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "gfx_backend_metal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-metal."0.7.0" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") && (!(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.kernel.name == "darwin") || !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isWindows) then "gfx_backend_vulkan" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-vulkan."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "gpu_alloc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "gpu_descriptor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "naga" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.5.1" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.24" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "tracing" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.22" { inherit profileName; };
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "wgt" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.7.0" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "cfg_aliases" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-types";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72fa9ba80626278fd87351555c363378d08122d7601e58319be3d6fa85a87747"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".widestring."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "widestring";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c168940144dd21fd8046987c16a46a33d5fc84eec29ef9dcddc2ac9e31526b7c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      [ "audioclient" ]
      [ "audiosessiontypes" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "basetsd")
      [ "combaseapi" ]
      [ "coml2api" ]
      [ "commctrl" ]
      [ "consoleapi" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "d3d11")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "d3d11_1")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "d3d11sdklayers")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "d3d12")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "d3d12sdklayers")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "d3d12shader")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "d3dcommon")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "d3dcompiler")
      [ "debug" ]
      [ "devpkey" ]
      [ "dwmapi" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dxgi1_2")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dxgi1_3")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dxgi1_4")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dxgi1_5")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dxgi1_6")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dxgidebug")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dxgiformat")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "dxgitype")
      [ "errhandlingapi" ]
      [ "fileapi" ]
      [ "handleapi" ]
      [ "hidusage" ]
      [ "imm" ]
      [ "impl-debug" ]
      [ "impl-default" ]
      [ "ioapiset" ]
      [ "ksmedia" ]
      [ "libloaderapi" ]
      [ "memoryapi" ]
      [ "minwinbase" ]
      [ "minwindef" ]
      [ "mmdeviceapi" ]
      [ "ntdef" ]
      [ "ntsecapi" ]
      [ "ntstatus" ]
      [ "objbase" ]
      [ "ole2" ]
      [ "processenv" ]
      [ "processthreadsapi" ]
      [ "profileapi" ]
      [ "shellapi" ]
      [ "shellscalingapi" ]
      [ "shobjidl_core" ]
      [ "std" ]
      [ "synchapi" ]
      [ "sysinfoapi" ]
      [ "timezoneapi" ]
      [ "unknwnbase" ]
      [ "winbase" ]
      [ "wincon" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native") "windef")
      [ "windowsx" ]
      [ "winerror" ]
      [ "wingdi" ]
      [ "winnt" ]
      [ "winreg" ]
      [ "winsock2" ]
      [ "winuser" ]
      [ "ws2def" ]
      [ "ws2ipdef" ]
      [ "ws2tcpip" ]
      [ "wtypesbase" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera") "xinput")
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "winapi-build";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winit."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "winit";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da4eda6fce0eb84bd0a33e3c8794eb902e1033d0a1d5a31bc4f19b1b4bbff597"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "mio" ]
      [ "mio-extras" ]
      [ "parking_lot" ]
      [ "percent-encoding" ]
      [ "sctk" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "wasm-bindgen")
      [ "wayland" ]
      [ "wayland-client" ]
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "web-sys")
      (lib.optional (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") "web_sys")
      [ "x11" ]
      [ "x11-dl" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "cocoa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_video_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-video-sys."0.1.4" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "dispatch" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.9" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.11" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "mio_extras" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio-extras."2.0.6" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.2.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "windows" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "percent_encoding" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "sctk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.12.1" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "wayland_client" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.2" { inherit profileName; };
      ${ if (rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/bevy_webgl2" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/default" || rootFeatures' ? "client/native" || rootFeatures' ? "client/web" || rootFeatures' ? "server/default" || rootFeatures' ? "server/native") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "x11_dl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.18.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winreg."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "winreg";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wio."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "wio";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d129932f4644ac2396cb456385cbf9e63b5b30c6e8dc4820bdca4eb082037a5"; };
    dependencies = {
      ${ if rootFeatures' ? "client/bevy_fly_camera" || rootFeatures' ? "client/debug-fly-camera" || rootFeatures' ? "client/native" || rootFeatures' ? "server/native" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ws2_32-sys."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ws2_32-sys";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
    buildDependencies = {
      build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.18.5" = overridableMkRustCrate (profileName: rec {
    name = "x11-dl";
    version = "2.18.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2bf981e3a5b3301209754218f962052d4d9ee97e478f4d26d4a6eced34c1fef8"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
      maybe_uninit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".maybe-uninit."2.0.0" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.19" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xattr."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "xattr";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unsupported" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.95" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "xcursor";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a9a231574ae78801646617cefd13bfe94be907c0e4fa979cfd8b770aa3c5d08"; };
    dependencies = {
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."6.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xdg."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "xdg";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d089681aa106a86fade1b0128fb5daf07d5867a509ab036d99988dec80429a57"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "xi-unicode";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a67300977d3dc3f8034dae89778f502b6ba20b269527b3223ba59c0cf393bb8a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "xml-rs";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b07db065a5cf61a7e4ba64f29e67db906fb1787316516c4e6e5ff0fea1efcd8a"; };
  });
  
}
